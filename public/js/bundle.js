/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./client/src/game.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./client/src/game.js":
/*!****************************!*\
  !*** ./client/src/game.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("console.warn(\"Defender Running ...\");\n\nvar Game = function Game(gameName, canvasId) {\n  var canvas = document.getElementById(canvasId);\n  console.log(\"gameName: \", gameName);\n  var width = $(window).width();\n  var height = $(window).height();\n  console.log(\"width: \", width);\n  console.log(\"height: \", height);\n  canvas.width = width;\n  canvas.height = height;\n  this.screen = canvas.getContext('2d');\n  this.gameSize = {\n    x: canvas.width,\n    y: canvas.height\n  };\n  var self = this;\n  this.keyListeners = [];\n  this.bulletCntr = 2;\n  this.score = 0;\n  this.gun_Locked = false;\n  this.gameOver = false;\n  this.paused = false;\n  this.PAUSED_TIMEOUT = 100;\n  this.HIGH_SCORES_SUFFIX = '_highScores';\n  this.invaderFireRate = 0.995;\n  this.level = 0;\n  this.fleetPatrol_X = 0;\n  this.levelData = levelData;\n  this.player = {};\n  this.radar = false;\n  this.imageLoadingProgressCallback = {};\n  this.images = {};\n  this.imageUrls = [];\n  this.imagesLoaded = 0;\n  this.imagesFailedToLoad = 0;\n  this.imagesIndex = 0; // Image Methods\n\n  this.getImage = getImage;\n  this.imageLoadedCallback = imageLoadedCallback;\n  this.imageLoadErrorCallback = imageLoadErrorCallback;\n  this.loadImage = loadImage;\n  this.loadImages = loadImages;\n  this.queueImage = queueImage; // Load and Call images\n\n  this.backgroundImg = {};\n  this.explosionImages = [];\n  this.togglePaused = togglePaused; // function\n\n  this.keyboarder = new Keyboarder(this); // methods\n  // loadSound(\"/sounds/click.wav\", function(shootSound) {\n  //     self.shootSound = shootSound;\n  //     });\n  // methods\n  // Load our sounds here\n  // Todo --- Put this into an obj to use as sound => url mapping\n\n  loadSound(\"/sounds/rocket-ver-1.wav\", function (shootSound) {\n    self.shootSound = shootSound;\n  });\n  loadSound(\"/sounds/explosion-ver-3.wav\", function (explosionSound) {\n    self.explosionSound = explosionSound;\n  });\n  loadSound(\"/sounds/Alien_Gun-ver-1.wav\", function (alienShootSound) {\n    self.alienShootSound = alienShootSound;\n  });\n\n  self.animate = function (time) {\n    // console.log(\"delta: \", time - self.lastTime);\n    self.lastTime = time;\n\n    if (this.gameOver) {\n      // show Game Over Dialog Box Here!!\n      this.gameOver = false;\n      game.over();\n      console.log(\"gameOver: ************\");\n      return;\n    }\n\n    if (self.paused) {\n      setTimeout(function () {\n        requestAnimationFrame(self.animate);\n      }, this.PAUSED_TIMEOUT);\n    } else {\n      self.update(time);\n      self.draw(self.screen, self.gameSize);\n      self.drawScore();\n      requestAnimationFrame(self.animate);\n    }\n  };\n\n  return this;\n}; // end of Game constructor\n\n\nGame.prototype = {\n  start: function start() {\n    var self = this;\n    this.loadLevel(this.level);\n    this.animate();\n  },\n  reset: function reset() {\n    this.bulletCntr = 2;\n    this.score = 0;\n    this.gun_Locked = false;\n    this.gameOver = false;\n    this.paused = false;\n    this.invaderFireRate = 0.995;\n    this.level = 0;\n    this.radar = false;\n    this.bulletCntr = 20;\n    this.gun_Locked = false;\n    this.gameOver = false;\n    this.paused = false;\n  },\n  update: function update(time) {\n    var bodies = this.bodies;\n    var tempBodies = bodies.slice(0);\n    var invadersLeftAlive = [];\n\n    var isCollingWithSomething = function isCollingWithSomething(b1) {\n      return tempBodies.filter(function (b2) {\n        return colliding(b1, b2);\n      }).length > 0;\n    };\n\n    tempBodies = tempBodies.filter(isCollingWithSomething);\n    tempBodies = tempBodies.filter(function (unknownBody) {\n      return unknownBody instanceof Invader || unknownBody instanceof Player;\n    });\n\n    for (var i = 0; i < tempBodies.length; i++) {\n      if (tempBodies[i].name === \"invader\" || tempBodies[i].name === \"player\") {\n        if (tempBodies[i].name === \"invader\") {\n          this.score += 100 * (this.getLevel() + 1);\n        } // console.log(\"score: \", this.score);\n\n\n        tempBodies[i].painter = new ExplosionSpritePainter(game.explosionImages);\n        tempBodies[i].name = \"explosion\";\n        tempBodies[i].size.x = tempBodies[i].size.x * 2.5;\n        tempBodies[i].size.y = tempBodies[i].size.y * 2.5;\n      }\n    }\n\n    var notCollingWithAnything = function notCollingWithAnything(b1) {\n      return bodies.filter(function (b2) {\n        return colliding(b1, b2);\n      }).length === 0;\n    };\n\n    this.bodies = this.bodies.filter(notCollingWithAnything); // Are all Invaders are destroyed \n\n    invadersLeftAlive = this.bodies.filter(function (unknownBody) {\n      return unknownBody instanceof Invader;\n    });\n\n    if (invadersLeftAlive.length < 5 && invadersLeftAlive.length >= 3) {\n      this.invaderFireRate = 0.98;\n      this.radar = true;\n    } else if (invadersLeftAlive.length < 3 && invadersLeftAlive.length >= 2) {\n      this.invaderFireRate = 0.96; // this.radar = true;\n    } else if (invadersLeftAlive.length < 2) {\n      this.invaderFireRate = 0.92; // this.radar = true;\n    } // Add bodies back with explosion\n\n\n    if (tempBodies.length > 0) {\n      for (var j = 0; j < tempBodies.length; j++) {\n        this.bodies.push(tempBodies[j]);\n      }\n    } // Remove all bodies that are not visible on the screen \n\n\n    this.bodies = this.bodies.filter(function (theBody) {\n      return theBody.visible;\n    });\n    this.bodies = this.bodies.filter(function (theBody) {\n      return theBody.remove === false;\n    });\n    var isPlayerAlive = this.bodies.filter(function (unknownBody) {\n      return unknownBody instanceof Player;\n    }); // this.drawScore();\n\n    if (isPlayerAlive.length < 1) {\n      //delay game over to let animation finish\n      setTimeout(function () {\n        this.gameOver = true;\n      }, 750);\n    }\n\n    if (invadersLeftAlive.length <= 0 && isPlayerAlive.length === 1) {\n      this.paused = true;\n      this.incrementLevel();\n      setTimeout(function () {\n        this.game.loadLevel();\n      }, 1250);\n    } // Update Position\n\n\n    for (var idx = 0; idx < this.bodies.length; idx++) {\n      this.bodies[idx].update(time);\n    }\n  },\n  draw: function draw(screen, gameSize) {\n    screen.clearRect(0, 0, gameSize.x, gameSize.y);\n    screen.drawImage(this.backgroundImg, 0, 0, gameSize.x, gameSize.y);\n\n    for (var i = 0; i < this.bodies.length; i++) {\n      this.bodies[i].draw(this.screen, this.bodies[i]);\n    }\n  },\n  loadLevel: function loadLevel() {\n    console.log(\" \\n *** Loading level Number \" + this.level + \" ***\");\n    var level = this.getLevel();\n    var level_data = this.levelData[level];\n    var row = level_data.row;\n    var col = level_data.col;\n    var behavior = level_data.behavior;\n    var invaderImage = level_data.invaderImage;\n    this.radar = false;\n    this.player = new Player(this, [new CycleImages(16, 32)], new SpritePainter([game.playerImg]), this.gameSize);\n    this.speedX_Val = level_data.speedX;\n    this.invaderFireRate = level_data.invaderFireRate;\n    this.backgroundImg = level_data.backgroundImg;\n    this.bodies = createInvaders(this, this.gameSize, behavior, invaderImage, row, col).concat(this.player);\n    this.paused = false;\n  },\n  getLevel: function getLevel() {\n    return this.level;\n  },\n  incrementLevel: function incrementLevel() {\n    this.level++;\n\n    if (this.level > this.levelData.length - 1) {\n      this.level = 0;\n    }\n\n    return this.level;\n  },\n  addKeyListener: function addKeyListener(keyAndListener) {\n    game.keyListeners.push(keyAndListener);\n  },\n  findKeyListener: function findKeyListener(key) {\n    var listener;\n    game.keyListeners.forEach(function (keyAndListener) {\n      var currentKey = keyAndListener.key;\n\n      if (currentKey === key) {\n        listener = keyAndListener.listener;\n      }\n    });\n    return listener;\n  },\n  keyPressed: function keyPressed(e) {\n    var listener;\n    key = undefined;\n\n    switch (e.keyCode) {\n      case 80:\n        key = 'p';\n        break;\n    }\n\n    listener = game.findKeyListener(key);\n\n    if (listener) {\n      listener();\n    }\n  },\n  keyUp: function keyUp(e) {\n    var listener;\n    key = undefined;\n\n    switch (e.keyCode) {\n      case 32:\n        key = 'spacebar';\n        break;\n\n      case 37:\n        key = 'left arrow';\n        break;\n\n      case 39:\n        key = 'right arrow';\n        break;\n\n      case 38:\n        key = 'up arrow';\n        break;\n\n      case 40:\n        key = 'down arrow';\n        break;\n    }\n\n    listener = game.findKeyListener(key);\n\n    if (listener) {\n      listener();\n    }\n  },\n  addBody: function addBody(body) {\n    this.bodies.push(body);\n  },\n  invadersBelow: function invadersBelow(invader) {\n    return this.bodies.filter(function (b) {\n      return b instanceof Invader && b.center.y > invader.center.y && b.center.x - invader.center.x < invader.size.x;\n    }).length > 0;\n  },\n  getHighScores: function getHighScores() {\n    var key = game.gameName + game.HIGH_SCORES_SUFFIX,\n        highScoresString = localStorage[key];\n\n    if (highScoresString === undefined) {\n      localStorage[key] = JSON.stringify([]);\n    }\n\n    return JSON.parse(localStorage[key]);\n  },\n  setHighScore: function setHighScore() {\n    var key = gameName + game.HIGH_SCORES_SUFFIX,\n        highScoresString = localStorage;\n    highScores.unshift(highScore);\n    localStorage[key] = JSON.stringify(highScores);\n  },\n  clearHighScores: function clearHighScores() {\n    localStorage[game.gameName + this.HIGH_SCORES_SUFFIX] = JSON.stringify([]);\n  },\n  over: function over() {\n    console.log('inside over function');\n    var highScore = 0,\n        // highScores = this.getHighScores();\n    highScores = [{\n      score: 100\n    }, {\n      score: 75\n    }, {\n      score: 50\n    }];\n    var lastOnList = $('#highScoreList li').last().text();\n    console.log('lastOnList: ', lastOnList);\n\n    if (highScores.length === 0 || game.score > highScores[0].score) {\n      // this.showHighScores();\n      console.log('Insert highScoreToast');\n      game.highScoreToast.insertAfter('canvas');\n      game.highScoreToast.show();\n      $('#highScoreParagraph').html(game.score);\n    } else {\n      // $('#gameOverToast').show();\n      console.log('Insert gameOverToast');\n      game.gameOverToast.insertAfter('canvas');\n      game.gameOverToast.show();\n      $('#highScoreParagraph').html(game.score);\n    }\n\n    $('#inputScore').val(game.score); // this.gameOver = true;\n    // this.lastScore = this.score;\n    // this.score = 0;\n  },\n  // High Scores ............................................................\n  showHighScores: function showHighScores() {\n    $(\"#highScoreParagraph\").show();\n    $(\"#highScoreParagraph\").text(this.score);\n    $(\"#highScoreToast\").text(this.score);\n    this.updateHighScoreList();\n  },\n  updateHighScoreList: function updateHighScoreList() {\n    var el,\n        highScores = game.getHighScores(),\n        length = highScores.length,\n        highScore,\n        listParent = highScoreList.parentNode;\n  },\n  drawScore: function drawScore() {\n    var text = 'SCORE: ' + this.score;\n    this.screen.fillText(text, this.gameSize.x * 0.075, this.gameSize.y * 0.050);\n    this.screen.fillStyle = 'white';\n    var fontHeight = this.gameSize.y * 0.0375; // var fontHeight = 24;\n\n    this.screen.font = fontHeight + \"px Helvetica\";\n    this.screen.textAlign = 'left';\n    this.screen.textBaseline = 'top';\n  }\n}; // end Game.prototype\n\nvar imageLoadedCallback = function imageLoadedCallback(e) {\n  this.imagesLoaded++;\n};\n\nvar imageLoadErrorCallback = function imageLoadErrorCallback(e) {\n  this.imagesFailedToLoad++;\n};\n\nvar loadImage = function loadImage(imageUrl) {\n  var image = new Image();\n  var self = this;\n  image.src = imageUrl;\n  image.addEventListener('load', function (e) {\n    self.imageLoadedCallback(e);\n  });\n  image.addEventListener('error', function (e) {\n    self.imageLoadErrorCallback(e);\n  });\n  this.images[imageUrl] = image;\n};\n\nvar loadImages = function loadImages() {\n  if (this.imagesIndex < this.imageUrls.length) {\n    this.loadImage(this.imageUrls[this.imagesIndex]);\n    this.imagesIndex++;\n  }\n\n  return (this.imagesLoaded + this.imagesFailedToLoad) / this.imageUrls.length * 100;\n}; // Call to add image to queue\n\n\nvar queueImage = function queueImage(imageUrl) {\n  this.imageUrls.push(imageUrl);\n};\n\nvar getImage = function getImage(imageUrl) {\n  return this.images[imageUrl];\n};\n\nvar Player = function Player(game, behavior, painter, gameSize) {\n  this.name = \"player\";\n  this.gameSize = gameSize;\n  this.behavior = behavior;\n  this.painter = painter;\n  this.game = game;\n  this.step_X = 4;\n  this.step_Y = 4;\n  this.dx = this.dy = 1.015;\n  this.animating = false;\n  this.remove = false;\n  this.visible = true;\n  this.radar = false;\n  this.size = getSpriteSize('player', this.gameSize);\n  this.center = {\n    x: gameSize.x / 2,\n    y: gameSize.y - 1.0 * this.size.y\n  };\n};\n\nPlayer.prototype = {\n  update: function update(time) {\n    //Loop through all behaviors\n    for (var i = 0; i < this.behavior.length; i++) {\n      this.behavior[i].execute(this, this.gameSize, time);\n    }\n\n    if (this.game.keyboarder.isDown(this.game.keyboarder.KEYS.LEFT)) {\n      this.step_X *= this.dx;\n      this.step_X = this.step_X > 8 ? 8 : this.step_X;\n      this.center.x = this.center.x < 0 - this.size.x / 2 ? this.game.gameSize.x : this.center.x;\n      this.center.x -= this.step_X;\n    }\n\n    if (this.game.keyboarder.isDown(this.game.keyboarder.KEYS.RIGHT)) {\n      this.step_X *= this.dx;\n      this.step_X = this.step_X > 8 ? 8 : this.step_X;\n      this.center.x = this.center.x > this.game.gameSize.x + this.size.x / 2 ? 0 : this.center.x;\n      this.center.x += this.step_X;\n    }\n\n    if (this.game.keyboarder.isDown(this.game.keyboarder.KEYS.UP)) {\n      this.step_Y *= this.dy;\n      this.step_Y = this.step_Y > 8 ? 8 : this.step_Y;\n      this.center.y = this.center.y > this.game.gameSize.y + this.size.y / 2 ? 0 : this.center.y;\n      this.center.y += this.step_Y;\n    }\n\n    if (this.game.keyboarder.isDown(this.game.keyboarder.KEYS.DOWN)) {\n      this.step_Y *= this.dy;\n      this.step_Y = this.step_Y > 8 ? 8 : this.step_Y;\n      this.center.y = this.center.y < 0 - this.size.y / 2 ? this.game.gameSize.y : this.center.y;\n      this.center.y -= this.step_Y;\n    }\n\n    if (this.game.keyboarder.isDown(this.game.keyboarder.KEYS.SPACE) && !this.game.gun_Locked) {\n      this.game.bulletCntr--;\n      this.game.gun_Locked = this.game.bulletCntr <= 0 ? true : false;\n      var missle = new Missle({\n        x: this.center.x,\n        y: this.center.y - this.size.y / 2\n      }, {\n        x: 0,\n        y: -this.gameSize.y * 0.0150\n      }, this.gameSize);\n      this.game.score -= 5;\n      this.game.addBody(missle);\n\n      try {\n        this.game.shootSound.load();\n        this.game.shootSound.play();\n      } catch (error) {\n        console.log('Error loading sound: ', error); // Sound loading error\n      }\n    }\n  },\n  draw: function draw(screen, body) {\n    this.painter.draw(screen, body);\n  }\n};\n\nvar Invader = function Invader(game, center, behavior, painter, gameSize) {\n  this.name = \"invader\";\n  this.game = game;\n  this.gameSize = gameSize;\n  this.behavior = behavior;\n  this.painter = painter;\n  this.visible = true;\n  this.animating = false;\n  this.remove = false; // this.game.radar = false;\n\n  this.size = getSpriteSize('invader', this.gameSize);\n  this.center = center;\n  this.radians = 0.025;\n  this.totalRadians = 0;\n  this.scaleHeight = 1.5;\n  this.patrolX = 0;\n  this.speedX = gameSize.x * this.game.speedX_Val;\n};\n\nInvader.prototype = {\n  update: function update(time) {\n    var targetLocation = {};\n\n    for (var i = 0; i < this.behavior.length; i++) {\n      this.behavior[i].execute(this, this.gameSize, time);\n    }\n\n    this.visible = this.center.y > this.gameSize.y * 1.10 ? false : true;\n\n    if (Math.random() > this.game.invaderFireRate && !this.game.invadersBelow(this)) {\n      if (this.game.radar === true) {\n        targetLocation = radarGuidance(this.game.player, this, this.gameSize.y * 0.0075);\n      } else {\n        targetLocation = {\n          x: 0,\n          y: this.gameSize.y * 0.0075\n        };\n      }\n\n      var bullet = new Bullet({\n        x: this.center.x,\n        y: this.center.y + this.size.x / 2\n      }, targetLocation, this.gameSize);\n      this.game.addBody(bullet);\n    }\n  },\n  draw: function draw(screen, body) {\n    this.painter.draw(screen, body);\n  }\n};\n\nvar createInvaders = function createInvaders(game, gameSize, behavior, invaderImage, row, col) {\n  this.game = game;\n  var invaders = [],\n      fleetWidth = 0,\n      size = {};\n  size = getSpriteSize('invader', gameSize);\n  fleetWidth = 2 * col * size.x;\n  this.game.fleetPatrol_X = (gameSize.x - fleetWidth) / 2; // console.log(\"this.game.fleetPatrol_X: \",this.game.fleetPatrol_X);\n\n  for (var i = 0; i < row * col; i++) {\n    var x = this.game.fleetPatrol_X + i % col * (gameSize.x * 0.075);\n    var y = gameSize.y * 0.075 + i % row * (gameSize.y * 0.075);\n    invaders.push(new Invader(game, {\n      x: x,\n      y: y\n    }, [behavior, new CycleImages(16, 32)], new SpritePainter([invaderImage]), gameSize));\n  }\n\n  return invaders;\n};\n\nvar getSpriteSize = function getSpriteSize(spriteName, gameSize) {\n  var size = {};\n\n  if (spriteName === 'player') {\n    if (gameSize.x > 1400) {\n      size = {\n        x: gameSize.x * 0.050,\n        y: gameSize.x * 0.0750\n      };\n    } else if (gameSize.x > 1024) {\n      size = {\n        x: gameSize.x * 0.060,\n        y: gameSize.x * 0.090\n      };\n    } else if (gameSize.x > 768) {\n      size = {\n        x: gameSize.x * 0.075,\n        y: gameSize.x * 0.1125\n      };\n    } else if (gameSize.x > 401) {\n      size = {\n        x: gameSize.x * 0.100,\n        y: gameSize.x * 0.150\n      };\n    } else {\n      size = {\n        x: 20,\n        y: 20\n      }; // x: 15, y: 15\n    }\n  } else if (spriteName === 'invader') {\n    if (gameSize.x > 1400) {\n      size = {\n        x: gameSize.x * 0.0325,\n        y: gameSize.x * 0.0325\n      };\n    } else if (gameSize.x > 1024) {\n      size = {\n        x: gameSize.x * 0.0375,\n        y: gameSize.x * 0.0375\n      };\n    } else if (gameSize.x > 768) {\n      size = {\n        x: gameSize.x * 0.0425,\n        y: gameSize.x * 0.0425\n      };\n    } else if (gameSize.x > 401) {\n      size = {\n        x: gameSize.x * 0.0525,\n        y: gameSize.x * 0.0525\n      };\n    } else {\n      size = {\n        x: 20,\n        y: 20\n      }; // x: 15, y: 15\n    }\n  } else if (spriteName === 'missle') {\n    if (gameSize.x > 1024) {\n      size = {\n        x: 15,\n        y: 25\n      };\n    } else if (gameSize.x > 768) {\n      size = {\n        x: 10,\n        y: 16\n      };\n    } else if (gameSize.x > 401) {\n      size = {\n        x: 6,\n        y: 10\n      };\n    } else {\n      size = {\n        x: 4,\n        y: 7\n      }; // x: 15, y: 15\n    }\n  } else if (spriteName === 'bullet') {\n    if (gameSize.x > 1024) {\n      size = {\n        x: 15,\n        y: 15\n      };\n    } else if (gameSize.x > 768) {\n      size = {\n        x: 12,\n        y: 12\n      };\n    } else if (gameSize.x > 401) {\n      size = {\n        x: 8,\n        y: 8\n      };\n    } else {\n      size = {\n        x: 4,\n        y: 4\n      }; // x: 15, y: 15\n    }\n  }\n\n  return size;\n}; // Movements the aliens take\n\n\nvar rightToLeft = {\n  execute: function execute(body, gameSize) {\n    if (body.patrolX < -body.game.fleetPatrol_X || body.patrolX > body.game.fleetPatrol_X) {\n      body.speedX = -body.speedX; // Drops down after every patrol\n\n      body.center.y += body.size.y * 2.5; // body.speedX += body.speedX;\n    }\n\n    body.center.x += body.speedX;\n    body.patrolX += body.speedX;\n  }\n}; // Aliens will follow a  sinewave or snake patternp  \n\nvar sineWave = {\n  execute: function execute(body, gameSize) {\n    // console.log(\"In sineWave execute's this: %j\", body)\n    if (body.patrolX < -body.game.fleetPatrol_X || body.patrolX > body.game.fleetPatrol_X) {\n      body.speedX = -body.speedX;\n      body.radians = -body.radians; // Drops down after every patrol\n\n      body.center.y += body.size.y; // body.speedX += body.speedX;\n    }\n\n    body.totalRadians += body.radians;\n    body.center.x += body.speedX;\n    body.patrolX += body.speedX;\n    body.center.y += body.scaleHeight * Math.sin(body.totalRadians);\n  }\n};\nvar halfCircle = {\n  execute: function execute(body, gameSize) {\n    if (body.patrolX < -body.game.fleetPatrol_X || body.patrolX > body.game.fleetPatrol_X) {\n      body.speedX = -body.speedX; // body.radians = -body.radians;\n      // Drops down after every patrol\n\n      body.center.y += body.size.y;\n    }\n\n    body.totalRadians += body.radians * 0.5;\n    body.center.x += body.speedX;\n    body.patrolX += body.speedX;\n    body.center.y += body.scaleHeight * Math.sin(body.totalRadians);\n  }\n};\nvar dropDiagnal = {\n  execute: function execute(body, gameSize) {\n    if (body.patrolX < -body.game.fleetPatrol_X || body.patrolX > body.game.fleetPatrol_X) {\n      body.speedX = -body.speedX; // body.radians = -body.radians;\n      // Drops down after every patrol\n\n      body.center.y += body.size.y;\n    }\n\n    body.center.x += body.speedX;\n    body.patrolX += body.speedX;\n    body.center.y += body.speedX * 0.5;\n  }\n};\n\nvar Bullet = function Bullet(center, velocity, gameSize) {\n  this.gameSize = gameSize;\n  this.center = center;\n  this.velocity = velocity;\n  this.visible = true;\n  this.remove = false;\n  this.size = getSpriteSize('bullet', gameSize);\n};\n\nBullet.prototype = {\n  update: function update() {\n    this.center.x += this.velocity.x;\n    this.center.y += this.velocity.y; // If the bullet moves off the board\n    // set to visible = false\n\n    if (this.center.y < 0 - this.gameSize.y * 0.10 || this.center.y > this.gameSize.y * 1.10 || this.center.x < 0 - this.gameSize.x * 0.10 || this.center.x > this.gameSize.x * 1.10) {\n      this.visible = false;\n    }\n  },\n  draw: function draw(screen, body) {\n    screen.drawImage(game.enemy_bulletImg, body.center.x - body.size.x / 2, body.center.y - body.size.y / 2, body.size.x, body.size.y);\n  }\n};\n\nvar Missle = function Missle(center, velocity, gameSize) {\n  this.gameSize = gameSize; // this.size = { x: 15, y: 25 };\n\n  this.size = getSpriteSize('missle', gameSize);\n  this.center = center;\n  this.velocity = velocity;\n  this.visible = true;\n  this.remove = false;\n};\n\nMissle.prototype = {\n  update: function update() {\n    this.center.x += this.velocity.x;\n    this.center.y += this.velocity.y; // If the Missle moves off the board\n    // set visible to fasle\n\n    if (this.center.y < 0 - this.gameSize.y * 0.10 || this.center.y > this.gameSize.y * 1.10 || this.center.x < 0 - this.gameSize.x * 0.10 || this.center.x > this.gameSize.x * 1.10) {\n      this.visible = false;\n    }\n  },\n  draw: function draw(screen, body) {\n    screen.drawImage(game.missleImg, body.center.x - body.size.x / 2, body.center.y - body.size.y / 2, body.size.x, body.size.y);\n  }\n};\n\nvar Keyboarder = function Keyboarder(game) {\n  var keyState = {};\n\n  window.onkeydown = function (e) {\n    keyState[e.keyCode] = true;\n    game.keyPressed(e);\n  };\n\n  window.onkeyup = function (e) {\n    keyState[e.keyCode] = false;\n    game.keyUp(e);\n  };\n\n  this.isDown = function (keyCode) {\n    return keyState[keyCode] === true;\n  };\n\n  this.KEYS = {\n    LEFT: 37,\n    RIGHT: 39,\n    UP: 40,\n    DOWN: 38,\n    SPACE: 32,\n    P: 80\n  };\n}; // Detect collisions\n\n\nvar colliding = function colliding(b1, b2) {\n  return !(b1 === b2 || b1 instanceof Player && b2 instanceof Missle || b1 instanceof Missle && b2 instanceof Player || b1 instanceof Bullet && b2 instanceof Bullet || b1 instanceof Missle && b2 instanceof Missle || b1 instanceof Invader && b2 instanceof Invader || b1 instanceof Bullet && b2 instanceof Missle || b1 instanceof Missle && b2 instanceof Bullet || b1 instanceof Invader && b2 instanceof Bullet || b1 instanceof Bullet && b2 instanceof Invader || b1.center.x + b1.size.x / 2 < b2.center.x - b2.size.x / 2 || b1.center.y + b1.size.y / 2 < b2.center.y - b2.size.y / 2 || b1.center.x - b1.size.x / 2 > b2.center.x + b2.size.x / 2 || b1.center.y - b1.size.y / 2 > b2.center.y + b2.size.y / 2);\n};\n\nvar togglePaused = function togglePaused() {\n  console.log('togglePaused: ', game.pausedToast);\n\n  if (!this.paused) {\n    game.pausedToast.insertAfter('canvas');\n    game.pausedToast.show();\n  } else {\n    $('#pausedToast').detach();\n  }\n\n  this.paused = !this.paused;\n};\n\nvar loadSound = function loadSound(url, callback) {\n  var loaded = function loaded() {\n    callback(sound);\n    sound.removeEventListener('canplaythrough', loaded);\n  };\n\n  var sound = new Audio(url);\n  sound.addEventListener('canplaythrough', loaded);\n  sound.load();\n};\n\nvar SpritePainter = function SpritePainter(images) {\n  this.images = images;\n  this.imagesIndex = 0;\n};\n\nvar radarGuidance = function radarGuidance(shooter, target, velocity) {\n  var rev = -1,\n      dx = shooter.center.x - target.center.x,\n      dy = shooter.center.y - target.center.y,\n      theta = Math.atan(dy / dx);\n  if (target.center.x < shooter.center.x && target.center.y > shooter.center.y) rev = 1;else if (target.center.x < shooter.center.x && target.center.y < shooter.center.y) rev = 1;\n  var velocity_Dx = rev * velocity * Math.cos(theta),\n      velocity_Dy = rev * velocity * Math.sin(theta);\n  return {\n    x: velocity_Dx,\n    y: velocity_Dy\n  };\n};\n\nSpritePainter.prototype = {\n  advance: function advance(body) {\n    if (this.imagesIndex === this.images.length - 1) {\n      this.imagesIndex = 0;\n    } else {\n      this.imagesIndex++;\n    }\n  },\n  draw: function draw(screen, body) {\n    var spriteImage = this.images[this.imagesIndex];\n    screen.drawImage(spriteImage, body.center.x - body.size.x / 2, body.center.y - body.size.y / 2, body.size.x, body.size.y);\n  }\n};\n\nvar ExplosionSpritePainter = function ExplosionSpritePainter(images) {\n  this.images = images;\n  this.imagesIndex = 0;\n};\n\nExplosionSpritePainter.prototype = {\n  advance: function advance(body) {\n    if (this.imagesIndex === this.images.length - 1) {\n      // this.imagesIndex = 0;\n      body.remove = true;\n      body.visible = false;\n      body.animating = false;\n    } else {\n      this.imagesIndex++;\n    }\n  },\n  draw: function draw(screen, body) {\n    var spriteImage = this.images[this.imagesIndex];\n    body.animating = true;\n\n    try {\n      screen.drawImage(spriteImage, body.center.x - body.size.x / 2, body.center.y - body.size.y / 2, body.size.x, body.size.y);\n    } catch (e) {// statements to handle any exceptions\n      // console.log(e); // pass exception object to error handler\n    }\n  }\n};\n\nvar CycleImages = function CycleImages(frameCnt, PAGE_FLIP_INTERVAL) {\n  this.frameCounter = 0;\n  this.frameCnt = frameCnt;\n  this.lastAdvance = 0;\n  this.PAGE_FLIP_INTERVAL = PAGE_FLIP_INTERVAL;\n};\n\nCycleImages.prototype = {\n  execute: function execute(body, gameSize, time) {\n    if (time - this.lastAdvance > this.PAGE_FLIP_INTERVAL) {\n      body.painter.advance(body);\n      this.lastAdvance = time;\n    }\n  }\n}; // We store level data here in an object\n\nvar levelData = [{\n  speedX: 0.0020,\n  behavior: sineWave,\n  invaderImage: {},\n  row: 2,\n  col: 7,\n  backgroundImg: {},\n  invaderFireRate: 0.995,\n  invaderHits: 1\n}, {\n  speedX: 0.0020,\n  behavior: halfCircle,\n  invaderImage: {},\n  row: 3,\n  col: 7,\n  backgroundImg: {},\n  invaderFireRate: 0.995,\n  invaderHits: 1\n}, {\n  speedX: 0.0022,\n  behavior: rightToLeft,\n  invaderImage: {},\n  row: 4,\n  col: 7,\n  backgroundImg: {},\n  invaderFireRate: 0.994,\n  invaderHits: 1\n}, {\n  speedX: 0.00225,\n  behavior: dropDiagnal,\n  invaderImage: {},\n  row: 5,\n  col: 7,\n  backgroundImg: {},\n  invaderFireRate: 0.994,\n  invaderHits: 1\n}]; // We create a new game here\n\nvar game = new Game(\"Defender\", \"screen\");\ngame.addKeyListener({\n  key: 'p',\n  listener: function listener() {\n    game.togglePaused();\n  }\n});\ngame.addKeyListener({\n  key: 'spacebar',\n  listener: function listener() {\n    // reset counter for bullets\n    // When spacebar comes up\n    // keyUp() uses this function\n    setTimeout(function () {\n      game.gun_Locked = false;\n    }, 200);\n\n    if (self.gameOver) {\n      window.location.reload();\n    }\n\n    if (game.paused && !self.gameOver) {\n      console.log('togglePaused: ', game.paused);\n      game.togglePaused();\n    }\n  }\n}); // Reset these when the arrow keys come UP\n\ngame.addKeyListener({\n  key: 'left arrow',\n  listener: function listener() {\n    game.player.step_X = 4;\n  }\n});\ngame.addKeyListener({\n  key: 'right arrow',\n  listener: function listener() {\n    game.player.step_X = 4;\n  }\n});\ngame.addKeyListener({\n  key: 'up arrow',\n  listener: function listener() {\n    game.player.step_Y = 4;\n  }\n});\ngame.addKeyListener({\n  key: 'down arrow',\n  listener: function listener() {\n    game.player.step_Y = 4;\n  }\n});\n$('#pausedToast').on('click', function (e) {\n  console.log('pausedToast');\n  game.togglePaused();\n});\n$('.newGameButton').on('click', function (e) {\n  // console.log('game.start();');\n  // Get the reset() working later\n  // game.reset();\n  // game.start();\n  // window.location.reload();\n  window.location.href = window.location.origin;\n});\n$(window).on('blur', function () {\n  if (!game.gameOver && !game.paused) {\n    game.togglePaused();\n  }\n});\n$(window).on('focus', function () {\n  if (game.paused) {\n    game.togglePaused();\n  }\n}); // Queue Images here\n// Level Background Images\n\ngame.queueImage(\"/images/Space_1_slice.jpg\");\ngame.queueImage(\"/images/Milky_Way.jpg\");\ngame.queueImage(\"/images/Galaxy.jpg\");\ngame.queueImage(\"/images/Space_1.jpg\"); // game.queueImage(\"/images/\");\n\ngame.queueImage(\"/images/Starships/starships_0007_Ex-ving.png\");\ngame.queueImage(\"/images/missle.png\"); //  Queue Alien ships\n\ngame.queueImage(\"/images/Starships/starships_0006_Bow-fighter_Rev.png\");\ngame.queueImage(\"/images/Starships/starships_0004_Ice-Speedster_Rev.png\");\ngame.queueImage(\"/images/Starships/starships_0005_Centenial-Hawk_Rev.png\");\ngame.queueImage(\"/images/Starships/starships_0001_Sun-killer_Rev.png\");\ngame.queueImage(\"/images/enemy-bullet.png\"); // Explosion Images\n\ngame.queueImage(\"/images/img/explode_1.png\");\ngame.queueImage(\"/images/img/explode_2.png\");\ngame.queueImage(\"/images/img/explode_3.png\");\ngame.queueImage(\"/images/img/explode_4.png\");\ngame.queueImage(\"/images/img/explode_5.png\");\ngame.queueImage(\"/images/img/explode_6.png\");\ngame.queueImage(\"/images/img/explode_7.png\");\ngame.queueImage(\"/images/img/explode_8.png\");\ngame.queueImage(\"/images/img/explode_9.png\");\ngame.queueImage(\"/images/img/explode_10.png\");\ngame.queueImage(\"/images/img/explode_11.png\");\ngame.queueImage(\"/images/img/explode_12.png\");\ngame.queueImage(\"/images/img/explode_13.png\");\ngame.queueImage(\"/images/img/explode_14.png\");\ngame.queueImage(\"/images/img/explode_15.png\");\ngame.queueImage(\"/images/img/explode_16.png\"); /////////////////////////////////////////////\n\ninterval = setInterval(function () {\n  var loadingPercentComplete = game.loadImages(); // console.log('loading Percentage Completed: ', loadingPercentComplete);\n\n  if (loadingPercentComplete === 100) {\n    console.log(\"loading ... 100% Complete: OK!!!\");\n    clearInterval(interval);\n  } // We MUST Load Images here \n\n\n  game.backgroundImg = game.getImage(\"/images/Space_1_slice.jpg\");\n  game.playerImg = game.getImage(\"/images/Starships/starships_0007_Ex-ving.png\");\n  game.missleImg = game.getImage(\"/images/missle.png\");\n  game.enemy_bulletImg = game.getImage(\"/images/enemy-bullet.png\"); // Load Alien ships into level obj's\n\n  game.levelData[0].invaderImage = game.getImage(\"/images/Starships/starships_0006_Bow-fighter_Rev.png\");\n  game.levelData[1].invaderImage = game.getImage(\"/images/Starships/starships_0004_Ice-Speedster_Rev.png\");\n  game.levelData[2].invaderImage = game.getImage(\"/images/Starships/starships_0005_Centenial-Hawk_Rev.png\");\n  game.levelData[3].invaderImage = game.getImage(\"/images/Starships/starships_0001_Sun-killer_Rev.png\");\n  game.levelData[0].backgroundImg = game.getImage(\"/images/Space_1_slice.jpg\");\n  game.levelData[1].backgroundImg = game.getImage(\"/images/Milky_Way.jpg\");\n  game.levelData[2].backgroundImg = game.getImage(\"/images/Galaxy.jpg\");\n  game.levelData[3].backgroundImg = game.getImage(\"/images/Space_1.jpg\"); //Load Explosion Images\n\n  game.tmp1 = game.getImage(\"/images/img/explode_1.png\");\n  game.tmp2 = game.getImage(\"/images/img/explode_2.png\");\n  game.tmp3 = game.getImage(\"/images/img/explode_3.png\");\n  game.tmp4 = game.getImage(\"/images/img/explode_4.png\");\n  game.tmp5 = game.getImage(\"/images/img/explode_5.png\");\n  game.tmp6 = game.getImage(\"/images/img/explode_6.png\");\n  game.tmp7 = game.getImage(\"/images/img/explode_7.png\");\n  game.tmp8 = game.getImage(\"/images/img/explode_8.png\");\n  game.tmp9 = game.getImage(\"/images/img/explode_9.png\");\n  game.tmp10 = game.getImage(\"/images/img/explode_10.png\");\n  game.tmp11 = game.getImage(\"/images/img/explode_11.png\");\n  game.tmp12 = game.getImage(\"/images/img/explode_12.png\");\n  game.tmp13 = game.getImage(\"/images/img/explode_13.png\");\n  game.tmp14 = game.getImage(\"/images/img/explode_14.png\");\n  game.tmp15 = game.getImage(\"/images/img/explode_15.png\");\n  game.tmp16 = game.getImage(\"/images/img/explode_16.png\");\n}, 16); /////////////////////////////////////////////////\n// var loadToastTitle = document.getElementById(\"loadToastTitle\");\n// Hide Canvas\n\n$('#screen').hide(); // click to start game\n\n$('#loadButton').on('click', function (e) {\n  /* Hide HTML using CSS\n   * Classes are used for speed\n   * to reduce page flicker \n   * jQuery for convenience */\n  $('#pausedToast').removeClass('hide');\n  $('#scoreToast').removeClass('hide');\n  $('#progressbar').removeClass('hide');\n  $('#gameOverToast').removeClass('hide');\n  $('#highScoreToast').removeClass('hide'); // detach but save HTML snippet\n\n  game.loadingToast = $('#loadingToast').detach();\n  game.pausedToast = $('#pausedToast').detach();\n  game.progressbar = $('#progressbar').detach();\n  game.gameOverToast = $('#gameOverToast').detach();\n  game.highScoreToast = $('#highScoreToast').detach();\n  $('#screen').show(); // loadToastTitle.style.display = \"none\";\n  // $('loadToastTitle').hide()\n  // $('#loadToastTitle').css(\"display\", \"none\");\n\n  game.explosionImages.push(game.tmp1, game.tmp2, game.tmp3, game.tmp4, game.tmp5, game.tmp6, game.tmp7, game.tmp8, game.tmp9, game.tmp10, game.tmp11, game.tmp12, game.tmp13, game.tmp14, game.tmp15, game.tmp16); // game.loadLevel(0);\n\n  e.preventDefault(); // Delay game to make sure all assets have loaded\n\n  setTimeout(function () {\n    game.start();\n  }, 250);\n});\nvar gScore = game.score;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jbGllbnQvc3JjL2dhbWUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2dhbWUuanM/MjQyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLndhcm4oXCJEZWZlbmRlciBSdW5uaW5nIC4uLlwiKTtcblxuICAgIHZhciBHYW1lID0gZnVuY3Rpb24oZ2FtZU5hbWUsIGNhbnZhc0lkKSB7XG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjYW52YXNJZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZ2FtZU5hbWU6IFwiLCBnYW1lTmFtZSk7XG5cbiAgICAgICAgdmFyIHdpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJ3aWR0aDogXCIsIHdpZHRoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJoZWlnaHQ6IFwiLCBoZWlnaHQpO1xuXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuc2NyZWVuID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIHRoaXMuZ2FtZVNpemUgPSB7IHg6IGNhbnZhcy53aWR0aCwgeTogY2FudmFzLmhlaWdodCB9O1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy4ga2V5TGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgdGhpcy5idWxsZXRDbnRyID0gMjsgIFxuICAgICAgICB0aGlzLnNjb3JlID0gMDtcbiAgICAgICAgdGhpcy5ndW5fTG9ja2VkID0gZmFsc2U7IFxuICAgICAgICB0aGlzLmdhbWVPdmVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuUEFVU0VEX1RJTUVPVVQgPSAxMDA7XG4gICAgICAgIHRoaXMuSElHSF9TQ09SRVNfU1VGRklYID0gJ19oaWdoU2NvcmVzJztcblxuICAgICAgICB0aGlzLmludmFkZXJGaXJlUmF0ZSA9IDAuOTk1O1xuICAgICAgICB0aGlzLmxldmVsID0gMDtcbiAgICAgICAgdGhpcy5mbGVldFBhdHJvbF9YID0gMDtcbiAgICAgICAgdGhpcy5sZXZlbERhdGEgID0gbGV2ZWxEYXRhO1xuXG4gICAgICAgIHRoaXMucGxheWVyID0ge307XG4gICAgICAgIHRoaXMucmFkYXIgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmltYWdlTG9hZGluZ1Byb2dyZXNzQ2FsbGJhY2sgPSB7fTtcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7fTtcbiAgICAgICAgdGhpcy5pbWFnZVVybHMgPSBbXTtcbiAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSAwO1xuICAgICAgICB0aGlzLmltYWdlc0ZhaWxlZFRvTG9hZCA9IDA7XG4gICAgICAgIHRoaXMuaW1hZ2VzSW5kZXggPSAwO1xuICAgICAgICBcbiAgICAgICAgLy8gSW1hZ2UgTWV0aG9kc1xuICAgICAgICB0aGlzLmdldEltYWdlID0gZ2V0SW1hZ2U7XG4gICAgICAgIHRoaXMuaW1hZ2VMb2FkZWRDYWxsYmFjayA9IGltYWdlTG9hZGVkQ2FsbGJhY2s7XG4gICAgICAgIHRoaXMuaW1hZ2VMb2FkRXJyb3JDYWxsYmFjayA9IGltYWdlTG9hZEVycm9yQ2FsbGJhY2s7XG4gICAgICAgIHRoaXMubG9hZEltYWdlID0gbG9hZEltYWdlO1xuICAgICAgICB0aGlzLmxvYWRJbWFnZXMgPSBsb2FkSW1hZ2VzO1xuICAgICAgICB0aGlzLnF1ZXVlSW1hZ2UgPSBxdWV1ZUltYWdlO1xuXG4gICAgICAgIC8vIExvYWQgYW5kIENhbGwgaW1hZ2VzXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZEltZyA9IHt9O1xuICAgICAgICB0aGlzLmV4cGxvc2lvbkltYWdlcyA9IFtdO1xuICAgICAgICB0aGlzLnRvZ2dsZVBhdXNlZCA9IHRvZ2dsZVBhdXNlZDsgLy8gZnVuY3Rpb25cbiAgICAgICAgdGhpcy5rZXlib2FyZGVyID0gbmV3IEtleWJvYXJkZXIodGhpcyk7XG5cbiAgICAgICAgLy8gbWV0aG9kc1xuXG4gICAgICAgIC8vIGxvYWRTb3VuZChcIi9zb3VuZHMvY2xpY2sud2F2XCIsIGZ1bmN0aW9uKHNob290U291bmQpIHtcbiAgICAgICAgLy8gICAgIHNlbGYuc2hvb3RTb3VuZCA9IHNob290U291bmQ7XG4gICAgICAgIC8vICAgICB9KTtcblxuICAgICAgICAgLy8gbWV0aG9kc1xuXG4gICAgICAgICAvLyBMb2FkIG91ciBzb3VuZHMgaGVyZVxuICAgICAgICAgLy8gVG9kbyAtLS0gUHV0IHRoaXMgaW50byBhbiBvYmogdG8gdXNlIGFzIHNvdW5kID0+IHVybCBtYXBwaW5nXG4gICAgICAgICBsb2FkU291bmQoXCIvc291bmRzL3JvY2tldC12ZXItMS53YXZcIiwgZnVuY3Rpb24gKHNob290U291bmQpIHtcbiAgICAgICAgICAgICBzZWxmLnNob290U291bmQgPSBzaG9vdFNvdW5kO1xuICAgICAgICAgfSk7XG5cbiAgICAgICAgIGxvYWRTb3VuZChcIi9zb3VuZHMvZXhwbG9zaW9uLXZlci0zLndhdlwiLCBmdW5jdGlvbiAoZXhwbG9zaW9uU291bmQpIHtcbiAgICAgICAgICAgICBzZWxmLmV4cGxvc2lvblNvdW5kID0gZXhwbG9zaW9uU291bmQ7XG4gICAgICAgICB9KTtcblxuICAgICAgICAgbG9hZFNvdW5kKFwiL3NvdW5kcy9BbGllbl9HdW4tdmVyLTEud2F2XCIsIGZ1bmN0aW9uIChhbGllblNob290U291bmQpIHtcbiAgICAgICAgICAgICBzZWxmLmFsaWVuU2hvb3RTb3VuZCA9IGFsaWVuU2hvb3RTb3VuZDtcblxuICAgICAgICAgfSk7XG5cbiAgICAgICAgc2VsZi5hbmltYXRlID0gZnVuY3Rpb24odGltZSkge1xuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImRlbHRhOiBcIiwgdGltZSAtIHNlbGYubGFzdFRpbWUpO1xuICAgICAgICAgICAgc2VsZi5sYXN0VGltZSA9IHRpbWU7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nYW1lT3Zlcil7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNob3cgR2FtZSBPdmVyIERpYWxvZyBCb3ggSGVyZSEhXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZU92ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5vdmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZ2FtZU92ZXI6ICoqKioqKioqKioqKlwiKTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnBhdXNlZCl7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc2VsZi5hbmltYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5QQVVTRURfVElNRU9VVCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKHRpbWUpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmRyYXcoc2VsZi5zY3JlZW4sIHNlbGYuZ2FtZVNpemUpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmRyYXdTY29yZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc2VsZi5hbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG59OyAvLyBlbmQgb2YgR2FtZSBjb25zdHJ1Y3RvclxuXG5HYW1lLnByb3RvdHlwZSA9IHtcblxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLmxvYWRMZXZlbCh0aGlzLmxldmVsKTtcbiAgICAgICAgdGhpcy5hbmltYXRlKCk7XG4gICAgfSxcbiAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYnVsbGV0Q250ciA9IDI7ICBcbiAgICAgICAgdGhpcy5zY29yZSA9IDA7XG4gICAgICAgIHRoaXMuZ3VuX0xvY2tlZCA9IGZhbHNlOyBcbiAgICAgICAgdGhpcy5nYW1lT3ZlciA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmludmFkZXJGaXJlUmF0ZSA9IDAuOTk1O1xuICAgICAgICB0aGlzLmxldmVsID0gMDtcbiAgICAgICAgdGhpcy5yYWRhciA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1bGxldENudHIgPSAyMDsgIFxuICAgICAgICB0aGlzLmd1bl9Mb2NrZWQgPSBmYWxzZTsgXG4gICAgICAgIHRoaXMuZ2FtZU92ZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbih0aW1lKSB7XG4gICAgICAgIHZhciBib2RpZXMgPSB0aGlzLmJvZGllcztcbiAgICAgICAgdmFyIHRlbXBCb2RpZXMgPSBib2RpZXMuc2xpY2UoMCk7XG5cbiAgICAgICAgdmFyIGludmFkZXJzTGVmdEFsaXZlID0gW107XG5cbiAgICAgICAgdmFyIGlzQ29sbGluZ1dpdGhTb21ldGhpbmcgPSBmdW5jdGlvbihiMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBCb2RpZXMuZmlsdGVyKGZ1bmN0aW9uKGIyKSB7IHJldHVybiBjb2xsaWRpbmcoYjEsIGIyKTsgfSkubGVuZ3RoID4gMDsgXG4gICAgICAgIH07XG5cbiAgICAgICAgdGVtcEJvZGllcyA9IHRlbXBCb2RpZXMuZmlsdGVyKGlzQ29sbGluZ1dpdGhTb21ldGhpbmcpO1xuXG4gICAgICAgIHRlbXBCb2RpZXMgPSB0ZW1wQm9kaWVzLmZpbHRlcihmdW5jdGlvbih1bmtub3duQm9keSkge1xuICAgICAgICAgICAgcmV0dXJuICh1bmtub3duQm9keSBpbnN0YW5jZW9mIEludmFkZXIpIHx8ICh1bmtub3duQm9keSBpbnN0YW5jZW9mIFBsYXllcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVtcEJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRlbXBCb2RpZXNbaV0ubmFtZSA9PT0gXCJpbnZhZGVyXCIgfHwgdGVtcEJvZGllc1tpXS5uYW1lID09PSBcInBsYXllclwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlbXBCb2RpZXNbaV0ubmFtZSA9PT0gXCJpbnZhZGVyXCIgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NvcmUgKz0gMTAwICogKHRoaXMuZ2V0TGV2ZWwoKSArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInNjb3JlOiBcIiwgdGhpcy5zY29yZSk7XG4gICAgICAgICAgICAgICAgdGVtcEJvZGllc1tpXS5wYWludGVyID0gbmV3IEV4cGxvc2lvblNwcml0ZVBhaW50ZXIoZ2FtZS5leHBsb3Npb25JbWFnZXMpO1xuICAgICAgICAgICAgICAgIHRlbXBCb2RpZXNbaV0ubmFtZSA9IFwiZXhwbG9zaW9uXCI7XG5cbiAgICAgICAgICAgICAgICB0ZW1wQm9kaWVzW2ldLnNpemUueCA9IHRlbXBCb2RpZXNbaV0uc2l6ZS54ICogMi41O1xuICAgICAgICAgICAgICAgIHRlbXBCb2RpZXNbaV0uc2l6ZS55ID0gdGVtcEJvZGllc1tpXS5zaXplLnkgKiAyLjU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbm90Q29sbGluZ1dpdGhBbnl0aGluZyA9IGZ1bmN0aW9uKGIxKSB7XG4gICAgICAgICAgICByZXR1cm4gYm9kaWVzLmZpbHRlcihmdW5jdGlvbihiMikgeyByZXR1cm4gY29sbGlkaW5nKGIxLCBiMik7IH0pLmxlbmd0aCA9PT0gMDsgXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5ib2RpZXMgPSB0aGlzLmJvZGllcy5maWx0ZXIobm90Q29sbGluZ1dpdGhBbnl0aGluZyk7XG5cbiAgICAgICAgLy8gQXJlIGFsbCBJbnZhZGVycyBhcmUgZGVzdHJveWVkIFxuICAgICAgICBpbnZhZGVyc0xlZnRBbGl2ZSA9IHRoaXMuYm9kaWVzLmZpbHRlcihmdW5jdGlvbih1bmtub3duQm9keSkge1xuICAgICAgICAgICAgcmV0dXJuIHVua25vd25Cb2R5IGluc3RhbmNlb2YgSW52YWRlcjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGludmFkZXJzTGVmdEFsaXZlLmxlbmd0aCA8IDUgJiYgaW52YWRlcnNMZWZ0QWxpdmUubGVuZ3RoID49IDMpe1xuICAgICAgICAgICAgdGhpcy5pbnZhZGVyRmlyZVJhdGUgPSAwLjk4O1xuICAgICAgICAgICAgdGhpcy5yYWRhciA9IHRydWU7XG4gICAgICAgIH0gZWxzZSAgaWYgKGludmFkZXJzTGVmdEFsaXZlLmxlbmd0aCA8IDMgJiYgaW52YWRlcnNMZWZ0QWxpdmUubGVuZ3RoID49IDIpe1xuICAgICAgICAgICAgdGhpcy5pbnZhZGVyRmlyZVJhdGUgPSAwLjk2O1xuICAgICAgICAgICAgLy8gdGhpcy5yYWRhciA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoaW52YWRlcnNMZWZ0QWxpdmUubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgdGhpcy5pbnZhZGVyRmlyZVJhdGUgPSAwLjkyO1xuICAgICAgICAgICAgLy8gdGhpcy5yYWRhciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgYm9kaWVzIGJhY2sgd2l0aCBleHBsb3Npb25cbiAgICAgICBpZiAodGVtcEJvZGllcy5sZW5ndGggPiAwKSB7ICAgICBcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGVtcEJvZGllcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHRoaXMuYm9kaWVzLnB1c2godGVtcEJvZGllc1tqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgYWxsIGJvZGllcyB0aGF0IGFyZSBub3QgdmlzaWJsZSBvbiB0aGUgc2NyZWVuIFxuICAgICAgICB0aGlzLmJvZGllcyA9IHRoaXMuYm9kaWVzLmZpbHRlcihmdW5jdGlvbih0aGVCb2R5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhlQm9keS52aXNpYmxlO1xuICAgICAgICB9KTsgXG5cbiAgICAgICAgdGhpcy5ib2RpZXMgPSB0aGlzLmJvZGllcy5maWx0ZXIoZnVuY3Rpb24odGhlQm9keSkge1xuICAgICAgICAgICAgIHJldHVybiB0aGVCb2R5LnJlbW92ZSA9PT0gZmFsc2U7XG4gICAgICAgIH0pOyBcblxuICAgICAgICB2YXIgaXNQbGF5ZXJBbGl2ZSA9IHRoaXMuYm9kaWVzLmZpbHRlcihmdW5jdGlvbih1bmtub3duQm9keSkge1xuICAgICAgICAgICAgcmV0dXJuIHVua25vd25Cb2R5IGluc3RhbmNlb2YgUGxheWVyO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyB0aGlzLmRyYXdTY29yZSgpO1xuXG4gICAgICAgIGlmIChpc1BsYXllckFsaXZlLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIC8vZGVsYXkgZ2FtZSBvdmVyIHRvIGxldCBhbmltYXRpb24gZmluaXNoXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZU92ZXIgPSB0cnVlO1xuICAgICAgICAgICAgfSwgNzUwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnZhZGVyc0xlZnRBbGl2ZS5sZW5ndGggPD0gMCAmJiBpc1BsYXllckFsaXZlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZWQgPSB0cnVlOyAgICAgXG4gICAgICAgICAgICB0aGlzLmluY3JlbWVudExldmVsKCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5sb2FkTGV2ZWwoKTtcbiAgICAgICAgICAgIH0sIDEyNTApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIFBvc2l0aW9uXG4gICAgICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IHRoaXMuYm9kaWVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIHRoaXMuYm9kaWVzW2lkeF0udXBkYXRlKHRpbWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGRyYXc6IGZ1bmN0aW9uKHNjcmVlbiwgZ2FtZVNpemUpIHtcbiAgICAgICAgc2NyZWVuLmNsZWFyUmVjdCgwLCAwLCBnYW1lU2l6ZS54LCBnYW1lU2l6ZS55KTtcbiAgICAgICAgc2NyZWVuLmRyYXdJbWFnZSh0aGlzLmJhY2tncm91bmRJbWcsIDAsIDAsIGdhbWVTaXplLngsIGdhbWVTaXplLnkpO1xuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5ib2RpZXNbaV0uZHJhdyh0aGlzLnNjcmVlbiwgdGhpcy5ib2RpZXNbaV0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGxvYWRMZXZlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIFxcbiAqKiogTG9hZGluZyBsZXZlbCBOdW1iZXIgXCIgKyB0aGlzLmxldmVsICsgXCIgKioqXCIpO1xuICAgICAgICB2YXIgbGV2ZWwgPSB0aGlzLmdldExldmVsKCk7XG4gICAgICAgIHZhciBsZXZlbF9kYXRhID0gdGhpcy5sZXZlbERhdGFbbGV2ZWxdO1xuICAgICAgICB2YXIgcm93ID0gbGV2ZWxfZGF0YS5yb3c7XG4gICAgICAgIHZhciBjb2wgPSBsZXZlbF9kYXRhLmNvbDtcbiAgICAgICAgdmFyIGJlaGF2aW9yID0gbGV2ZWxfZGF0YS5iZWhhdmlvcjtcbiAgICAgICAgdmFyIGludmFkZXJJbWFnZSA9IGxldmVsX2RhdGEuaW52YWRlckltYWdlO1xuXG4gICAgICAgIHRoaXMucmFkYXIgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnBsYXllciAgPSBuZXcgUGxheWVyKHRoaXMsIFsgbmV3IEN5Y2xlSW1hZ2VzKDE2LCAzMikgXSwgXG4gICAgICAgICAgICBuZXcgU3ByaXRlUGFpbnRlcihbZ2FtZS5wbGF5ZXJJbWddKSwgdGhpcy5nYW1lU2l6ZSk7XG5cbiAgICAgICAgdGhpcy5zcGVlZFhfVmFsID0gbGV2ZWxfZGF0YS5zcGVlZFg7XG4gICAgICAgIHRoaXMuaW52YWRlckZpcmVSYXRlID0gbGV2ZWxfZGF0YS5pbnZhZGVyRmlyZVJhdGU7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZEltZyA9IGxldmVsX2RhdGEuYmFja2dyb3VuZEltZztcblxuICAgICAgICB0aGlzLmJvZGllcyA9IGNyZWF0ZUludmFkZXJzKHRoaXMsIHRoaXMuZ2FtZVNpemUsIGJlaGF2aW9yLCBpbnZhZGVySW1hZ2UsIFxuICAgICAgICByb3csIGNvbCkuY29uY2F0KHRoaXMucGxheWVyKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG4gICAgfSxcblxuICAgIGdldExldmVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWw7XG4gICAgfSxcblxuICAgIGluY3JlbWVudExldmVsOiBmdW5jdGlvbigpIHsgICAgICAgIFxuICAgICAgICB0aGlzLmxldmVsKys7XG4gICAgICAgIGlmICh0aGlzLmxldmVsID4gdGhpcy5sZXZlbERhdGEubGVuZ3RoIC0gMSl7XG4gICAgICAgICAgICB0aGlzLmxldmVsID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sZXZlbDtcbiAgICB9LFxuXG4gICAgYWRkS2V5TGlzdGVuZXI6IGZ1bmN0aW9uKGtleUFuZExpc3RlbmVyKSB7XG4gICAgICAgIGdhbWUua2V5TGlzdGVuZXJzLnB1c2goa2V5QW5kTGlzdGVuZXIpO1xuICAgIH0sXG5cbiAgICBmaW5kS2V5TGlzdGVuZXI6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICB2YXIgbGlzdGVuZXI7XG5cbiAgICAgICAgZ2FtZS5rZXlMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihrZXlBbmRMaXN0ZW5lcikge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlBbmRMaXN0ZW5lci5rZXk7XG4gICAgICAgICAgICBpZiAoY3VycmVudEtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBrZXlBbmRMaXN0ZW5lci5saXN0ZW5lcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcjtcbiAgICB9LFxuXG4gICAga2V5UHJlc3NlZDogZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgbGlzdGVuZXI7XG4gICAgICAgIGtleSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICAgICAgY2FzZSA4MDoga2V5ID0gJ3AnOyAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdGVuZXIgPSBnYW1lLmZpbmRLZXlMaXN0ZW5lcihrZXkpO1xuICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAga2V5VXA6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyO1xuICAgICAgICBrZXkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgMzI6IGtleSA9ICdzcGFjZWJhcic7ICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM3OiBrZXkgPSAnbGVmdCBhcnJvdyc7ICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOToga2V5ID0gJ3JpZ2h0IGFycm93JzsgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzg6IGtleSA9ICd1cCBhcnJvdyc7ICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQwOiBrZXkgPSAnZG93biBhcnJvdyc7ICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdGVuZXIgPSBnYW1lLmZpbmRLZXlMaXN0ZW5lcihrZXkpO1xuICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgYWRkQm9keTogZnVuY3Rpb24oYm9keSkge1xuICAgICAgICB0aGlzLmJvZGllcy5wdXNoKGJvZHkpO1xuICAgIH0sXG5cbiAgICBpbnZhZGVyc0JlbG93OiBmdW5jdGlvbihpbnZhZGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvZGllcy5maWx0ZXIoZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgcmV0dXJuIGIgaW5zdGFuY2VvZiBJbnZhZGVyICYmXG4gICAgICAgICAgICAgICAgYi5jZW50ZXIueSA+IGludmFkZXIuY2VudGVyLnkgJiZcbiAgICAgICAgICAgICAgICBiLmNlbnRlci54IC0gaW52YWRlci5jZW50ZXIueCA8IGludmFkZXIuc2l6ZS54O1xuICAgICAgICB9KS5sZW5ndGggPiAwO1xuICAgIH0sXG5cbiAgICBnZXRIaWdoU2NvcmVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGtleSA9IGdhbWUuZ2FtZU5hbWUgKyBnYW1lLkhJR0hfU0NPUkVTX1NVRkZJWCxcbiAgICAgICAgaGlnaFNjb3Jlc1N0cmluZyA9IGxvY2FsU3RvcmFnZVtrZXldO1xuICAgICAgICBpZiAoaGlnaFNjb3Jlc1N0cmluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Vba2V5XSA9IEpTT04uc3RyaW5naWZ5KFtdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2Vba2V5XSk7XG4gICAgfSxcblxuICAgIHNldEhpZ2hTY29yZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBrZXkgPSBnYW1lTmFtZSArIGdhbWUuSElHSF9TQ09SRVNfU1VGRklYLFxuICAgICAgICBoaWdoU2NvcmVzU3RyaW5nID0gbG9jYWxTdG9yYWdlO1xuXG4gICAgICAgIGhpZ2hTY29yZXMudW5zaGlmdChoaWdoU2NvcmUpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Vba2V5XSA9IEpTT04uc3RyaW5naWZ5KGhpZ2hTY29yZXMpO1xuICAgIH0sXG5cbiAgICBjbGVhckhpZ2hTY29yZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsb2NhbFN0b3JhZ2VbZ2FtZS5nYW1lTmFtZSArIHRoaXMuSElHSF9TQ09SRVNfU1VGRklYXSA9IEpTT04uc3RyaW5naWZ5KFtdKTtcbiAgICB9LFxuXG4gICAgb3ZlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpbnNpZGUgb3ZlciBmdW5jdGlvbicpO1xuXG5cbiAgICAgICAgdmFyIGhpZ2hTY29yZSA9IDAsXG4gICAgICAgIC8vIGhpZ2hTY29yZXMgPSB0aGlzLmdldEhpZ2hTY29yZXMoKTtcbiAgICAgICAgaGlnaFNjb3JlcyA9IFt7c2NvcmU6IDEwMH0sIHtzY29yZTogNzV9ICwge3Njb3JlOiA1MH1dO1xuXG4gICAgICAgIHZhciBsYXN0T25MaXN0ID0gJCgnI2hpZ2hTY29yZUxpc3QgbGknKS5sYXN0KCkudGV4dCgpOyBcbiAgICAgICAgY29uc29sZS5sb2coJ2xhc3RPbkxpc3Q6ICcsIGxhc3RPbkxpc3QpO1xuXG4gICAgICAgIGlmIChoaWdoU2NvcmVzLmxlbmd0aCA9PT0gMCB8fCBnYW1lLnNjb3JlID4gaGlnaFNjb3Jlc1swXS5zY29yZSkge1xuICAgICAgICAgICAgLy8gdGhpcy5zaG93SGlnaFNjb3JlcygpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0luc2VydCBoaWdoU2NvcmVUb2FzdCcpO1xuICAgICAgICAgICAgZ2FtZS5oaWdoU2NvcmVUb2FzdC5pbnNlcnRBZnRlcignY2FudmFzJyk7XG4gICAgICAgICAgICBnYW1lLmhpZ2hTY29yZVRvYXN0LnNob3coKTsgXG4gICAgICAgICAgICAkKCcjaGlnaFNjb3JlUGFyYWdyYXBoJykuaHRtbChnYW1lLnNjb3JlKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gJCgnI2dhbWVPdmVyVG9hc3QnKS5zaG93KCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSW5zZXJ0IGdhbWVPdmVyVG9hc3QnKTtcbiAgICAgICAgICAgIGdhbWUuZ2FtZU92ZXJUb2FzdC5pbnNlcnRBZnRlcignY2FudmFzJyk7XG4gICAgICAgICAgICBnYW1lLmdhbWVPdmVyVG9hc3Quc2hvdygpO1xuICAgICAgICAgICAgJCgnI2hpZ2hTY29yZVBhcmFncmFwaCcpLmh0bWwoZ2FtZS5zY29yZSk7XG4gICAgICAgIH1cblxuICAgICAgICAkKCcjaW5wdXRTY29yZScpLnZhbChnYW1lLnNjb3JlKTtcblxuICAgICAgICAvLyB0aGlzLmdhbWVPdmVyID0gdHJ1ZTtcbiAgICAgICAgLy8gdGhpcy5sYXN0U2NvcmUgPSB0aGlzLnNjb3JlO1xuICAgICAgICAvLyB0aGlzLnNjb3JlID0gMDtcbiAgICB9LFxuICAgIC8vIEhpZ2ggU2NvcmVzIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICAgIHNob3dIaWdoU2NvcmVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgJChcIiNoaWdoU2NvcmVQYXJhZ3JhcGhcIikuc2hvdygpO1xuICAgICAgICAkKFwiI2hpZ2hTY29yZVBhcmFncmFwaFwiKS50ZXh0KHRoaXMuc2NvcmUpO1xuICAgICAgICAkKFwiI2hpZ2hTY29yZVRvYXN0XCIpLnRleHQodGhpcy5zY29yZSk7XG4gICAgICAgIHRoaXMudXBkYXRlSGlnaFNjb3JlTGlzdCgpO1xuICAgIH0sXG4gICAgdXBkYXRlSGlnaFNjb3JlTGlzdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlbCxcbiAgICAgICAgICAgIGhpZ2hTY29yZXMgPSBnYW1lLmdldEhpZ2hTY29yZXMoKSxcbiAgICAgICAgICAgIGxlbmd0aCA9IGhpZ2hTY29yZXMubGVuZ3RoLFxuICAgICAgICAgICAgaGlnaFNjb3JlLFxuICAgICAgICAgICAgbGlzdFBhcmVudCA9IGhpZ2hTY29yZUxpc3QucGFyZW50Tm9kZTsgIFxuXG4gICAgfSxcbiAgICBkcmF3U2NvcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdGV4dCA9ICdTQ09SRTogJyArIHRoaXMuc2NvcmU7XG4gICAgICAgIHRoaXMuc2NyZWVuLmZpbGxUZXh0KHRleHQsIHRoaXMuZ2FtZVNpemUueCAqIDAuMDc1LCB0aGlzLmdhbWVTaXplLnkgKiAwLjA1MCk7XG4gICAgICAgIHRoaXMuc2NyZWVuLmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICAgIHZhciBmb250SGVpZ2h0ID0gdGhpcy5nYW1lU2l6ZS55ICogMC4wMzc1O1xuICAgICAgICAvLyB2YXIgZm9udEhlaWdodCA9IDI0O1xuICAgICAgICB0aGlzLnNjcmVlbi5mb250ID0gZm9udEhlaWdodCArIFwicHggSGVsdmV0aWNhXCI7XG4gICAgICAgIHRoaXMuc2NyZWVuLnRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgdGhpcy5zY3JlZW4udGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgfVxuXG59OyAvLyBlbmQgR2FtZS5wcm90b3R5cGVcblxuXG52YXIgaW1hZ2VMb2FkZWRDYWxsYmFjayA9ICBmdW5jdGlvbihlKSB7XG4gICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkKys7XG4gICAgfTtcblxudmFyIGltYWdlTG9hZEVycm9yQ2FsbGJhY2sgPSBmdW5jdGlvbihlKXtcbiAgICAgICAgdGhpcy5pbWFnZXNGYWlsZWRUb0xvYWQrKztcbiAgICB9O1xuXG52YXIgbG9hZEltYWdlID0gZnVuY3Rpb24oaW1hZ2VVcmwpIHtcbiAgICAgICAgdmFyIGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICBpbWFnZS5zcmMgPSBpbWFnZVVybDtcblxuICAgICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgc2VsZi5pbWFnZUxvYWRlZENhbGxiYWNrKGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgc2VsZi5pbWFnZUxvYWRFcnJvckNhbGxiYWNrKGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmltYWdlc1tpbWFnZVVybF0gPSBpbWFnZTsgICAgICBcbiAgICB9O1xuXG52YXIgbG9hZEltYWdlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5pbWFnZXNJbmRleCA8IHRoaXMuaW1hZ2VVcmxzLmxlbmd0aCl7XG4gICAgICAgICAgICB0aGlzLmxvYWRJbWFnZSh0aGlzLmltYWdlVXJsc1t0aGlzLmltYWdlc0luZGV4XSk7XG4gICAgICAgICAgICB0aGlzLmltYWdlc0luZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKCh0aGlzLmltYWdlc0xvYWRlZCArIHRoaXMuaW1hZ2VzRmFpbGVkVG9Mb2FkKSAvIFxuICAgICAgICAgICAgdGhpcy5pbWFnZVVybHMubGVuZ3RoKSAqIDEwMDtcbiAgICB9O1xuXG4gICAgLy8gQ2FsbCB0byBhZGQgaW1hZ2UgdG8gcXVldWVcbnZhciBxdWV1ZUltYWdlID0gZnVuY3Rpb24oaW1hZ2VVcmwpIHtcbiAgICAgICAgdGhpcy5pbWFnZVVybHMucHVzaChpbWFnZVVybCk7XG4gICAgfTtcblxudmFyIGdldEltYWdlID0gZnVuY3Rpb24oaW1hZ2VVcmwpIHtcbiAgICAgICAgcmV0dXJuICB0aGlzLmltYWdlc1tpbWFnZVVybF07XG4gICAgfTtcbiAgICBcbnZhciBQbGF5ZXIgPSBmdW5jdGlvbihnYW1lLCBiZWhhdmlvciwgcGFpbnRlciwgZ2FtZVNpemUpIHtcbiAgICB0aGlzLm5hbWUgPSBcInBsYXllclwiO1xuICAgIHRoaXMuZ2FtZVNpemUgPSBnYW1lU2l6ZTtcbiAgICB0aGlzLmJlaGF2aW9yID0gYmVoYXZpb3I7XG4gICAgdGhpcy5wYWludGVyID0gcGFpbnRlcjtcbiAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgIHRoaXMuc3RlcF9YID0gNDtcbiAgICB0aGlzLnN0ZXBfWSA9IDQ7XG4gICAgdGhpcy5keCA9IHRoaXMuZHkgPSAxLjAxNTtcbiAgICB0aGlzLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgIHRoaXMucmVtb3ZlID0gZmFsc2U7IFxuICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5yYWRhciA9IGZhbHNlO1xuICAgIHRoaXMuc2l6ZSA9IGdldFNwcml0ZVNpemUoJ3BsYXllcicsIHRoaXMuZ2FtZVNpemUpO1xuICAgIHRoaXMuY2VudGVyID0geyB4OiBnYW1lU2l6ZS54IC8gMiwgeTogZ2FtZVNpemUueSAtIDEuMCAqIHRoaXMuc2l6ZS55IH07XG5cbn07XG5cblBsYXllci5wcm90b3R5cGUgPSB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbih0aW1lKSB7XG5cbiAgICAgICAgLy9Mb29wIHRocm91Z2ggYWxsIGJlaGF2aW9yc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmVoYXZpb3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuYmVoYXZpb3JbaV0uZXhlY3V0ZSh0aGlzLCB0aGlzLmdhbWVTaXplLCB0aW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmdhbWUua2V5Ym9hcmRlci5pc0Rvd24odGhpcy5nYW1lLmtleWJvYXJkZXIuS0VZUy5MRUZUKSkge1xuICAgICAgICAgICAgdGhpcy5zdGVwX1ggKj0gdGhpcy5keDtcbiAgICAgICAgICAgIHRoaXMuc3RlcF9YID0gdGhpcy5zdGVwX1ggPiA4ID8gOCA6IHRoaXMuc3RlcF9YO1xuICAgICAgICAgICAgdGhpcy5jZW50ZXIueCA9IHRoaXMuY2VudGVyLnggPCAoMCAtIHRoaXMuc2l6ZS54IC8gMikgPyB0aGlzLmdhbWUuZ2FtZVNpemUueCA6IHRoaXMuY2VudGVyLng7XG4gICAgICAgICAgICB0aGlzLmNlbnRlci54IC09IHRoaXMuc3RlcF9YO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmdhbWUua2V5Ym9hcmRlci5pc0Rvd24odGhpcy5nYW1lLmtleWJvYXJkZXIuS0VZUy5SSUdIVCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RlcF9YICo9IHRoaXMuZHg7XG4gICAgICAgICAgICB0aGlzLnN0ZXBfWCA9IHRoaXMuc3RlcF9YID4gOCA/IDggOiB0aGlzLnN0ZXBfWDtcbiAgICAgICAgICAgIHRoaXMuY2VudGVyLnggPSB0aGlzLmNlbnRlci54ID4gKHRoaXMuZ2FtZS5nYW1lU2l6ZS54ICsgdGhpcy5zaXplLnggLyAyKSA/IDAgOiB0aGlzLmNlbnRlci54O1xuICAgICAgICAgICAgdGhpcy5jZW50ZXIueCArPSB0aGlzLnN0ZXBfWDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5nYW1lLmtleWJvYXJkZXIuaXNEb3duKHRoaXMuZ2FtZS5rZXlib2FyZGVyLktFWVMuVVApKSB7XG4gICAgICAgICAgICB0aGlzLnN0ZXBfWSAqPSB0aGlzLmR5O1xuICAgICAgICAgICAgdGhpcy5zdGVwX1kgPSB0aGlzLnN0ZXBfWSA+IDggPyA4IDogdGhpcy5zdGVwX1k7XG4gICAgICAgICAgICB0aGlzLmNlbnRlci55ID0gdGhpcy5jZW50ZXIueSA+ICh0aGlzLmdhbWUuZ2FtZVNpemUueSArIHRoaXMuc2l6ZS55IC8gMikgPyAwIDogdGhpcy5jZW50ZXIueTtcbiAgICAgICAgICAgIHRoaXMuY2VudGVyLnkgKz0gdGhpcy5zdGVwX1k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZ2FtZS5rZXlib2FyZGVyLmlzRG93bih0aGlzLmdhbWUua2V5Ym9hcmRlci5LRVlTLkRPV04pKSB7XG4gICAgICAgICAgICB0aGlzLnN0ZXBfWSAqPSB0aGlzLmR5OyBcbiAgICAgICAgICAgIHRoaXMuc3RlcF9ZID0gdGhpcy5zdGVwX1kgPiA4ID8gOCA6IHRoaXMuc3RlcF9ZO1xuICAgICAgICAgICAgdGhpcy5jZW50ZXIueSA9IHRoaXMuY2VudGVyLnkgPCAoMCAtIHRoaXMuc2l6ZS55IC8gMikgPyB0aGlzLmdhbWUuZ2FtZVNpemUueSA6IHRoaXMuY2VudGVyLnk7XG4gICAgICAgICAgICB0aGlzLmNlbnRlci55IC09IHRoaXMuc3RlcF9ZO1xuICAgICAgICB9IFxuICAgICAgICBpZiAodGhpcy5nYW1lLmtleWJvYXJkZXIuaXNEb3duKHRoaXMuZ2FtZS5rZXlib2FyZGVyLktFWVMuU1BBQ0UpICYmIFxuICAgICAgICAgICAgIXRoaXMuZ2FtZS5ndW5fTG9ja2VkKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUuYnVsbGV0Q250ci0tO1xuICAgICAgICAgICAgdGhpcy5nYW1lLmd1bl9Mb2NrZWQgPSB0aGlzLmdhbWUuYnVsbGV0Q250ciA8PSAwID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgICAgICB2YXIgbWlzc2xlID0gbmV3IE1pc3NsZSh7IHg6IHRoaXMuY2VudGVyLngsIHk6IHRoaXMuY2VudGVyLnkgLSBcbiAgICAgICAgICAgICAgICB0aGlzLnNpemUueSAvIDJ9LCB7IHg6IDAsIHk6IC10aGlzLmdhbWVTaXplLnkgKiAwLjAxNTAgfSwgXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lU2l6ZSk7XG4gICAgICAgICAgICB0aGlzLmdhbWUuc2NvcmUgLT0gNTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGRCb2R5KG1pc3NsZSk7XG5cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuc2hvb3RTb3VuZC5sb2FkKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnNob290U291bmQucGxheSgpO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIGNhdGNoKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGxvYWRpbmcgc291bmQ6ICcsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBTb3VuZCBsb2FkaW5nIGVycm9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRyYXc6IGZ1bmN0aW9uKHNjcmVlbiwgYm9keSkge1xuICAgICAgICB0aGlzLnBhaW50ZXIuZHJhdyhzY3JlZW4sIGJvZHkpO1xuICAgICAgICB9ICAgXG59O1xuXG52YXIgSW52YWRlciA9IGZ1bmN0aW9uKGdhbWUsIGNlbnRlciwgYmVoYXZpb3IsIHBhaW50ZXIsIGdhbWVTaXplKSB7XG4gICAgdGhpcy5uYW1lID0gXCJpbnZhZGVyXCI7XG4gICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICB0aGlzLmdhbWVTaXplID0gZ2FtZVNpemU7XG4gICAgdGhpcy5iZWhhdmlvciA9IGJlaGF2aW9yO1xuICAgIHRoaXMucGFpbnRlciA9IHBhaW50ZXI7XG5cbiAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICAgIHRoaXMuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgdGhpcy5yZW1vdmUgPSBmYWxzZTtcbiAgICAvLyB0aGlzLmdhbWUucmFkYXIgPSBmYWxzZTtcbiAgICBcbiAgICB0aGlzLnNpemUgPSBnZXRTcHJpdGVTaXplKCdpbnZhZGVyJywgdGhpcy5nYW1lU2l6ZSk7XG5cbiAgICB0aGlzLmNlbnRlciA9IGNlbnRlcjtcbiAgICB0aGlzLnJhZGlhbnMgPSAwLjAyNTtcbiAgICB0aGlzLnRvdGFsUmFkaWFucyA9IDA7XG4gICAgdGhpcy5zY2FsZUhlaWdodCA9IDEuNTtcbiAgICB0aGlzLnBhdHJvbFggPSAwO1xuXG4gICAgdGhpcy5zcGVlZFggPSBnYW1lU2l6ZS54ICogdGhpcy5nYW1lLnNwZWVkWF9WYWw7IFxufTtcblxuSW52YWRlci5wcm90b3R5cGUgPSB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbih0aW1lKSB7XG5cbiAgICAgICAgdmFyIHRhcmdldExvY2F0aW9uID0ge307XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJlaGF2aW9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmJlaGF2aW9yW2ldLmV4ZWN1dGUodGhpcywgdGhpcy5nYW1lU2l6ZSwgdGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZpc2libGUgPSB0aGlzLmNlbnRlci55ID4gdGhpcy5nYW1lU2l6ZS55ICogMS4xMCA/IGZhbHNlIDogdHJ1ZTtcblxuICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA+IHRoaXMuZ2FtZS5pbnZhZGVyRmlyZVJhdGUgJiYgXG4gICAgICAgICAgICAhdGhpcy5nYW1lLmludmFkZXJzQmVsb3codGhpcykpIHtcblxuXG4gICAgICAgICAgICBpZiAodGhpcy5nYW1lLnJhZGFyID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TG9jYXRpb24gPSByYWRhckd1aWRhbmNlKHRoaXMuZ2FtZS5wbGF5ZXIsIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLCB0aGlzLmdhbWVTaXplLnkgKiAwLjAwNzUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRMb2NhdGlvbiA9IHsgeDogMCwgeTogdGhpcy5nYW1lU2l6ZS55ICogMC4wMDc1IH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBidWxsZXQgPSBuZXcgQnVsbGV0KHsgeDogdGhpcy5jZW50ZXIueCwgeTogdGhpcy5jZW50ZXIueSArIFxuICAgICAgICAgICAgICAgIHRoaXMuc2l6ZS54IC8gMn0sIHRhcmdldExvY2F0aW9uLCBcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVTaXplKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGRCb2R5KGJ1bGxldCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRyYXc6IGZ1bmN0aW9uKHNjcmVlbiwgYm9keSkge1xuICAgICAgICB0aGlzLnBhaW50ZXIuZHJhdyhzY3JlZW4sIGJvZHkpO1xuICAgIH0gICBcbn07XG5cbnZhciBjcmVhdGVJbnZhZGVycyA9IGZ1bmN0aW9uKGdhbWUsIGdhbWVTaXplLCBiZWhhdmlvciwgaW52YWRlckltYWdlLCByb3csIGNvbCkge1xuICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgdmFyIGludmFkZXJzID0gW10sXG4gICAgICAgIGZsZWV0V2lkdGggPSAwLFxuICAgICAgICBzaXplID0ge307XG5cbiAgICBzaXplID0gZ2V0U3ByaXRlU2l6ZSgnaW52YWRlcicsIGdhbWVTaXplKTtcbiAgICBmbGVldFdpZHRoID0gMiAqIGNvbCAqIHNpemUueDtcblxuICAgIHRoaXMuZ2FtZS5mbGVldFBhdHJvbF9YID0gKChnYW1lU2l6ZS54IC0gZmxlZXRXaWR0aCkgLyAyKTtcblxuICAgIC8vIGNvbnNvbGUubG9nKFwidGhpcy5nYW1lLmZsZWV0UGF0cm9sX1g6IFwiLHRoaXMuZ2FtZS5mbGVldFBhdHJvbF9YKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgKHJvdyAqIGNvbCk7IGkrKykge1xuXG4gICAgICAgIHZhciB4ID0gKHRoaXMuZ2FtZS5mbGVldFBhdHJvbF9YKSArIChpICUgY29sKSAqIChnYW1lU2l6ZS54ICogMC4wNzUpO1xuICAgICAgICB2YXIgeSA9IChnYW1lU2l6ZS55ICogMC4wNzUpICsgKGkgJSByb3cpICogKGdhbWVTaXplLnkgKiAwLjA3NSk7XG5cbiAgICAgICAgaW52YWRlcnMucHVzaChuZXcgSW52YWRlcihnYW1lLCB7IHg6IHgsIHk6IHkgfSwgW2JlaGF2aW9yLCBcbiAgICAgICAgICAgIG5ldyBDeWNsZUltYWdlcygxNiwgMzIpXSwgbmV3IFNwcml0ZVBhaW50ZXIoW2ludmFkZXJJbWFnZV0pLCBnYW1lU2l6ZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnZhZGVycztcbn07XG5cbnZhciBnZXRTcHJpdGVTaXplID0gZnVuY3Rpb24oc3ByaXRlTmFtZSwgZ2FtZVNpemUpe1xuICAgIHZhciBzaXplID0ge307XG5cbiAgICBpZiAoc3ByaXRlTmFtZSA9PT0gJ3BsYXllcicpIHtcbiAgICAgICAgaWYgKGdhbWVTaXplLnggPiAxNDAwKSB7XG4gICAgICAgICAgICBzaXplID0geyB4OiBnYW1lU2l6ZS54ICogMC4wNTAsIHk6IGdhbWVTaXplLnggKiAwLjA3NTAgfTsgXG4gICAgICAgIH0gZWxzZSBpZiAoZ2FtZVNpemUueCA+IDEwMjQpIHtcbiAgICAgICAgICAgIHNpemUgPSB7IHg6IGdhbWVTaXplLnggKiAwLjA2MCwgeTogZ2FtZVNpemUueCAqIDAuMDkwIH07IFxuICAgICAgICB9IGVsc2UgaWYgKGdhbWVTaXplLnggPiA3Njgpe1xuICAgICAgICAgICAgc2l6ZSA9IHsgeDogZ2FtZVNpemUueCAqIDAuMDc1LCB5OiBnYW1lU2l6ZS54ICogMC4xMTI1IH07IFxuICAgICAgICB9IGVsc2UgaWYgKGdhbWVTaXplLnggPiA0MDEpIHtcbiAgICAgICAgICAgIHNpemUgPSB7IHg6IGdhbWVTaXplLnggKiAwLjEwMCwgeTogZ2FtZVNpemUueCAqIDAuMTUwIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzaXplID0geyB4OiAyMCwgeTogMjAgfTsgLy8geDogMTUsIHk6IDE1XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNwcml0ZU5hbWUgPT09ICdpbnZhZGVyJykge1xuICAgICAgICBpZiAoZ2FtZVNpemUueCA+IDE0MDApIHtcbiAgICAgICAgICAgIHNpemUgPSB7IHg6IGdhbWVTaXplLnggKiAwLjAzMjUsIHk6IGdhbWVTaXplLnggKiAwLjAzMjUgfTsgXG4gICAgICAgIH0gZWxzZSBpZiAoZ2FtZVNpemUueCA+IDEwMjQpIHtcbiAgICAgICAgICAgIHNpemUgPSB7IHg6IGdhbWVTaXplLnggKiAwLjAzNzUsIHk6IGdhbWVTaXplLnggKiAwLjAzNzUgfTsgXG4gICAgICAgIH0gZWxzZSBpZiAoZ2FtZVNpemUueCA+IDc2OCl7XG4gICAgICAgICAgICBzaXplID0geyB4OiBnYW1lU2l6ZS54ICogMC4wNDI1LCB5OiBnYW1lU2l6ZS54ICogMC4wNDI1IH07IFxuICAgICAgICB9IGVsc2UgaWYgKGdhbWVTaXplLnggPiA0MDEpIHtcbiAgICAgICAgICAgIHNpemUgPSB7IHg6IGdhbWVTaXplLnggKiAwLjA1MjUsIHk6IGdhbWVTaXplLnggKiAwLjA1MjUgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNpemUgPSB7IHg6IDIwLCB5OiAyMCB9OyAvLyB4OiAxNSwgeTogMTVcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3ByaXRlTmFtZSA9PT0gJ21pc3NsZScpIHtcblxuICAgICAgICBpZiAoZ2FtZVNpemUueCA+IDEwMjQpIHtcbiAgICAgICAgICAgIHNpemUgPSB7IHg6IDE1LCB5OiAyNSB9OyBcbiAgICAgICAgfSBlbHNlIGlmIChnYW1lU2l6ZS54ID4gNzY4KXtcbiAgICAgICAgICAgIHNpemUgPSB7IHg6IDEwLCB5OiAxNiB9OyBcbiAgICAgICAgfSBlbHNlIGlmIChnYW1lU2l6ZS54ID4gNDAxKSB7XG4gICAgICAgICAgICBzaXplID0geyB4OiA2LCB5OiAxMCB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2l6ZSA9IHsgeDogNCwgeTogNyB9OyAvLyB4OiAxNSwgeTogMTVcbiAgICAgICAgfVxuICAgIH1lbHNlIGlmIChzcHJpdGVOYW1lID09PSAnYnVsbGV0Jykge1xuXG4gICAgICAgIGlmIChnYW1lU2l6ZS54ID4gMTAyNCkge1xuICAgICAgICAgICAgc2l6ZSA9IHsgeDogMTUsIHk6IDE1IH07IFxuICAgICAgICB9IGVsc2UgaWYgKGdhbWVTaXplLnggPiA3Njgpe1xuICAgICAgICAgICAgc2l6ZSA9IHsgeDogMTIsIHk6IDEyIH07IFxuICAgICAgICB9IGVsc2UgaWYgKGdhbWVTaXplLnggPiA0MDEpIHtcbiAgICAgICAgICAgIHNpemUgPSB7IHg6IDgsIHk6IDggfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNpemUgPSB7IHg6IDQsIHk6IDQgfTsgLy8geDogMTUsIHk6IDE1XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNpemU7XG59O1xuXG4vLyBNb3ZlbWVudHMgdGhlIGFsaWVucyB0YWtlXG52YXIgcmlnaHRUb0xlZnQgPSB7XG5cbiAgICBleGVjdXRlOiBmdW5jdGlvbihib2R5LCBnYW1lU2l6ZSkge1xuXG4gICAgICAgIGlmIChib2R5LnBhdHJvbFggPCAtYm9keS5nYW1lLmZsZWV0UGF0cm9sX1ggfHwgYm9keS5wYXRyb2xYID4gKGJvZHkuZ2FtZS5mbGVldFBhdHJvbF9YKSkge1xuICAgICAgICAgICAgYm9keS5zcGVlZFggPSAtYm9keS5zcGVlZFg7XG4gICAgICAgICAgICAvLyBEcm9wcyBkb3duIGFmdGVyIGV2ZXJ5IHBhdHJvbFxuICAgICAgICAgICAgYm9keS5jZW50ZXIueSArPSBib2R5LnNpemUueSAqIDIuNTtcbiAgICAgICAgICAgIC8vIGJvZHkuc3BlZWRYICs9IGJvZHkuc3BlZWRYO1xuICAgICAgICB9XG4gICAgICAgIGJvZHkuY2VudGVyLnggKz0gYm9keS5zcGVlZFg7XG4gICAgICAgIGJvZHkucGF0cm9sWCArPSBib2R5LnNwZWVkWDtcblxuICAgIH1cbn07XG5cbi8vIEFsaWVucyB3aWxsIGZvbGxvdyBhICBzaW5ld2F2ZSBvciBzbmFrZSBwYXR0ZXJucCAgXG52YXIgc2luZVdhdmUgPSB7XG5cbiAgICBleGVjdXRlOiBmdW5jdGlvbihib2R5LCBnYW1lU2l6ZSkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkluIHNpbmVXYXZlIGV4ZWN1dGUncyB0aGlzOiAlalwiLCBib2R5KVxuXG4gICAgICAgIGlmIChib2R5LnBhdHJvbFggPCAtYm9keS5nYW1lLmZsZWV0UGF0cm9sX1ggfHwgYm9keS5wYXRyb2xYID4gKGJvZHkuZ2FtZS5mbGVldFBhdHJvbF9YKSkge1xuICAgICAgICAgICAgYm9keS5zcGVlZFggPSAtYm9keS5zcGVlZFg7XG4gICAgICAgICAgICBib2R5LnJhZGlhbnMgPSAtYm9keS5yYWRpYW5zO1xuXG4gICAgICAgICAgICAvLyBEcm9wcyBkb3duIGFmdGVyIGV2ZXJ5IHBhdHJvbFxuICAgICAgICAgICAgYm9keS5jZW50ZXIueSArPSBib2R5LnNpemUueTtcbiAgICAgICAgICAgIC8vIGJvZHkuc3BlZWRYICs9IGJvZHkuc3BlZWRYO1xuICAgICAgICB9XG5cbiAgICAgICAgYm9keS50b3RhbFJhZGlhbnMgKz0gYm9keS5yYWRpYW5zO1xuICAgICAgICBib2R5LmNlbnRlci54ICs9IGJvZHkuc3BlZWRYO1xuICAgICAgICBib2R5LnBhdHJvbFggKz0gYm9keS5zcGVlZFg7XG4gICAgICAgIGJvZHkuY2VudGVyLnkgKz0gYm9keS5zY2FsZUhlaWdodCAqIE1hdGguc2luKGJvZHkudG90YWxSYWRpYW5zKTtcblxuICAgIH1cbn07XG5cbnZhciBoYWxmQ2lyY2xlID0ge1xuXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24oYm9keSwgZ2FtZVNpemUpIHtcblxuICAgICAgICBpZiAoYm9keS5wYXRyb2xYIDwgLWJvZHkuZ2FtZS5mbGVldFBhdHJvbF9YIHx8IGJvZHkucGF0cm9sWCA+IChib2R5LmdhbWUuZmxlZXRQYXRyb2xfWCkpIHtcbiAgICAgICAgICAgIGJvZHkuc3BlZWRYID0gLWJvZHkuc3BlZWRYO1xuICAgICAgICAgICAgLy8gYm9keS5yYWRpYW5zID0gLWJvZHkucmFkaWFucztcblxuICAgICAgICAgICAgLy8gRHJvcHMgZG93biBhZnRlciBldmVyeSBwYXRyb2xcbiAgICAgICAgICAgIGJvZHkuY2VudGVyLnkgKz0gYm9keS5zaXplLnk7XG4gICAgICAgIH1cblxuICAgICAgICBib2R5LnRvdGFsUmFkaWFucyArPSBib2R5LnJhZGlhbnMgKiAwLjU7XG4gICAgICAgIGJvZHkuY2VudGVyLnggKz0gYm9keS5zcGVlZFg7XG4gICAgICAgIGJvZHkucGF0cm9sWCArPSBib2R5LnNwZWVkWDtcbiAgICAgICAgYm9keS5jZW50ZXIueSArPSBib2R5LnNjYWxlSGVpZ2h0ICogTWF0aC5zaW4oYm9keS50b3RhbFJhZGlhbnMpO1xuXG4gICAgfVxufTtcblxudmFyIGRyb3BEaWFnbmFsID0ge1xuXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24oYm9keSwgZ2FtZVNpemUpIHtcblxuICAgICAgICBpZiAoYm9keS5wYXRyb2xYIDwgLWJvZHkuZ2FtZS5mbGVldFBhdHJvbF9YIHx8IGJvZHkucGF0cm9sWCA+IChib2R5LmdhbWUuZmxlZXRQYXRyb2xfWCkpIHtcbiAgICAgICAgICAgIGJvZHkuc3BlZWRYID0gLWJvZHkuc3BlZWRYO1xuICAgICAgICAgICAgLy8gYm9keS5yYWRpYW5zID0gLWJvZHkucmFkaWFucztcblxuICAgICAgICAgICAgLy8gRHJvcHMgZG93biBhZnRlciBldmVyeSBwYXRyb2xcbiAgICAgICAgICAgIGJvZHkuY2VudGVyLnkgKz0gYm9keS5zaXplLnk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGJvZHkuY2VudGVyLnggKz0gKGJvZHkuc3BlZWRYICk7XG4gICAgICAgIGJvZHkucGF0cm9sWCArPSAoYm9keS5zcGVlZFgpO1xuICAgICAgICBib2R5LmNlbnRlci55ICs9IChib2R5LnNwZWVkWCAqIDAuNSk7XG4gICAgICAgIFxuICAgIH1cbn07XG5cbnZhciBCdWxsZXQgPSBmdW5jdGlvbihjZW50ZXIsIHZlbG9jaXR5LCBnYW1lU2l6ZSkge1xuICAgIHRoaXMuZ2FtZVNpemUgPSBnYW1lU2l6ZTtcbiAgICB0aGlzLmNlbnRlciA9IGNlbnRlcjtcbiAgICB0aGlzLnZlbG9jaXR5ID0gdmVsb2NpdHk7XG4gICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnJlbW92ZSA9IGZhbHNlO1xuICAgIHRoaXMuc2l6ZSA9IGdldFNwcml0ZVNpemUoJ2J1bGxldCcsIGdhbWVTaXplKTtcbn07XG5cbkJ1bGxldC5wcm90b3R5cGUgPSB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5jZW50ZXIueCArPSB0aGlzLnZlbG9jaXR5Lng7XG4gICAgICAgIHRoaXMuY2VudGVyLnkgKz0gdGhpcy52ZWxvY2l0eS55OyBcblxuICAgICAgICAvLyBJZiB0aGUgYnVsbGV0IG1vdmVzIG9mZiB0aGUgYm9hcmRcbiAgICAgICAgLy8gc2V0IHRvIHZpc2libGUgPSBmYWxzZVxuICAgICAgICBpZiAodGhpcy5jZW50ZXIueSA8ICAwIC0gKHRoaXMuZ2FtZVNpemUueSAqIDAuMTApICAgfHwgXG4gICAgICAgICAgICB0aGlzLmNlbnRlci55ID4gdGhpcy5nYW1lU2l6ZS55ICogMS4xMCAgICAgICAgICB8fFxuICAgICAgICAgICAgdGhpcy5jZW50ZXIueCA8IDAgLSAodGhpcy5nYW1lU2l6ZS54ICogMC4xMCkgICAgfHxcbiAgICAgICAgICAgIHRoaXMuY2VudGVyLnggPiB0aGlzLmdhbWVTaXplLnggKiAxLjEwKSB7XG5cbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwgXG4gICAgZHJhdzogZnVuY3Rpb24oc2NyZWVuLCBib2R5KSB7XG4gICAgICAgIHNjcmVlbi5kcmF3SW1hZ2UoZ2FtZS5lbmVteV9idWxsZXRJbWcsIGJvZHkuY2VudGVyLnggLSBib2R5LnNpemUueCAvIDIsIFxuICAgICAgICAgICAgYm9keS5jZW50ZXIueSAtIGJvZHkuc2l6ZS55IC8gMiAsIGJvZHkuc2l6ZS54LCBib2R5LnNpemUueSk7XG4gICAgfVxufTtcblxudmFyIE1pc3NsZSA9IGZ1bmN0aW9uKGNlbnRlciwgdmVsb2NpdHksIGdhbWVTaXplKSB7XG4gICAgdGhpcy5nYW1lU2l6ZSA9IGdhbWVTaXplO1xuICAgIC8vIHRoaXMuc2l6ZSA9IHsgeDogMTUsIHk6IDI1IH07XG4gICAgdGhpcy5zaXplID0gZ2V0U3ByaXRlU2l6ZSgnbWlzc2xlJywgZ2FtZVNpemUpO1xuICAgIHRoaXMuY2VudGVyID0gY2VudGVyO1xuICAgIHRoaXMudmVsb2NpdHkgPSB2ZWxvY2l0eTtcbiAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICAgIHRoaXMucmVtb3ZlID0gZmFsc2U7XG59O1xuXG5NaXNzbGUucHJvdG90eXBlID0ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY2VudGVyLnggKz0gdGhpcy52ZWxvY2l0eS54O1xuICAgICAgICB0aGlzLmNlbnRlci55ICs9IHRoaXMudmVsb2NpdHkueTsgXG5cbiAgICAgICAgLy8gSWYgdGhlIE1pc3NsZSBtb3ZlcyBvZmYgdGhlIGJvYXJkXG4gICAgICAgIC8vIHNldCB2aXNpYmxlIHRvIGZhc2xlXG4gICAgICAgIGlmICh0aGlzLmNlbnRlci55IDwgIDAgLSAodGhpcy5nYW1lU2l6ZS55ICogMC4xMCkgICB8fCBcbiAgICAgICAgICAgIHRoaXMuY2VudGVyLnkgPiB0aGlzLmdhbWVTaXplLnkgKiAxLjEwICAgICAgICAgIHx8XG4gICAgICAgICAgICB0aGlzLmNlbnRlci54IDwgMCAtICh0aGlzLmdhbWVTaXplLnggKiAwLjEwKSAgICB8fFxuICAgICAgICAgICAgdGhpcy5jZW50ZXIueCA+IHRoaXMuZ2FtZVNpemUueCAqIDEuMTApIHtcblxuICAgICAgICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LCBcbiAgICBkcmF3OiBmdW5jdGlvbihzY3JlZW4sIGJvZHkpIHtcbiAgICAgICAgc2NyZWVuLmRyYXdJbWFnZShnYW1lLm1pc3NsZUltZywgYm9keS5jZW50ZXIueCAtIGJvZHkuc2l6ZS54IC8gMiwgXG4gICAgICAgICAgICBib2R5LmNlbnRlci55IC0gYm9keS5zaXplLnkgLyAyICwgYm9keS5zaXplLngsIGJvZHkuc2l6ZS55KTtcbiAgICB9XG59O1xuXG52YXIgS2V5Ym9hcmRlciA9IGZ1bmN0aW9uKGdhbWUpIHtcbiAgICAgICAgdmFyIGtleVN0YXRlID0ge307XG5cbiAgICAgICAgd2luZG93Lm9ua2V5ZG93biA9IGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAga2V5U3RhdGVbZS5rZXlDb2RlXSA9IHRydWU7XG5cbiAgICAgICAgICAgIGdhbWUua2V5UHJlc3NlZChlKTtcbiAgICAgICAgfTtcblxuICAgICAgICB3aW5kb3cub25rZXl1cCA9IGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAga2V5U3RhdGVbZS5rZXlDb2RlXSA9IGZhbHNlO1xuICAgICAgICAgICAgZ2FtZS5rZXlVcChlKTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIHRoaXMuaXNEb3duID0gZnVuY3Rpb24oa2V5Q29kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGtleVN0YXRlW2tleUNvZGVdID09PSB0cnVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuS0VZUyA9IHsgTEVGVDogMzcsIFJJR0hUOiAzOSwgVVA6IDQwLCBET1dOOiAzOCwgU1BBQ0U6IDMyLCBQOiA4MCB9O1xufTtcblxuLy8gRGV0ZWN0IGNvbGxpc2lvbnNcbnZhciBjb2xsaWRpbmcgPSBmdW5jdGlvbihiMSwgYjIpIHtcbiAgICByZXR1cm4gIShiMSA9PT0gYjIgfHxcbiAgICAgICAgKGIxIGluc3RhbmNlb2YgUGxheWVyICYmIGIyIGluc3RhbmNlb2YgTWlzc2xlKSAgfHxcbiAgICAgICAgKGIxIGluc3RhbmNlb2YgTWlzc2xlICYmIGIyIGluc3RhbmNlb2YgUGxheWVyKSAgfHxcbiAgICAgICAgKGIxIGluc3RhbmNlb2YgQnVsbGV0ICYmIGIyIGluc3RhbmNlb2YgQnVsbGV0KSAgfHxcbiAgICAgICAgKGIxIGluc3RhbmNlb2YgTWlzc2xlICYmIGIyIGluc3RhbmNlb2YgTWlzc2xlKSAgfHxcbiAgICAgICAgKGIxIGluc3RhbmNlb2YgSW52YWRlciAmJiBiMiBpbnN0YW5jZW9mIEludmFkZXIpfHxcbiAgICAgICAgKGIxIGluc3RhbmNlb2YgQnVsbGV0ICYmIGIyIGluc3RhbmNlb2YgTWlzc2xlKSAgfHxcbiAgICAgICAgKGIxIGluc3RhbmNlb2YgTWlzc2xlICYmIGIyIGluc3RhbmNlb2YgQnVsbGV0KSAgfHxcbiAgICAgICAgKGIxIGluc3RhbmNlb2YgSW52YWRlciAmJiBiMiBpbnN0YW5jZW9mIEJ1bGxldCkgfHxcbiAgICAgICAgKGIxIGluc3RhbmNlb2YgQnVsbGV0ICYmIGIyIGluc3RhbmNlb2YgSW52YWRlcikgfHxcbiAgICAgICAgYjEuY2VudGVyLnggKyBiMS5zaXplLnggLyAyIDwgYjIuY2VudGVyLnggLSBiMi5zaXplLnggLyAyIHx8XG4gICAgICAgIGIxLmNlbnRlci55ICsgYjEuc2l6ZS55IC8gMiA8IGIyLmNlbnRlci55IC0gYjIuc2l6ZS55IC8gMiB8fFxuICAgICAgICBiMS5jZW50ZXIueCAtIGIxLnNpemUueCAvIDIgPiBiMi5jZW50ZXIueCArIGIyLnNpemUueCAvIDIgfHxcbiAgICAgICAgYjEuY2VudGVyLnkgLSBiMS5zaXplLnkgLyAyID4gYjIuY2VudGVyLnkgKyBiMi5zaXplLnkgLyAyKTtcbn07XG5cbnZhciB0b2dnbGVQYXVzZWQgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmxvZygndG9nZ2xlUGF1c2VkOiAnLCBnYW1lLnBhdXNlZFRvYXN0KTtcbiAgICBpZiAoIXRoaXMucGF1c2VkKSB7XG4gICAgICAgIGdhbWUucGF1c2VkVG9hc3QuaW5zZXJ0QWZ0ZXIoJ2NhbnZhcycpO1xuICAgICAgICBnYW1lLnBhdXNlZFRvYXN0LnNob3coKTsgICAgICAgIFxuICAgIH0gZWxzZSB7XG4gICAgICAgICQoJyNwYXVzZWRUb2FzdCcpLmRldGFjaCgpO1xuICAgIH1cbiAgICAgICAgdGhpcy5wYXVzZWQgPSAhdGhpcy5wYXVzZWQ7XG4gICAgfTtcblxudmFyIGxvYWRTb3VuZCA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcbiAgICB2YXIgbG9hZGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNhbGxiYWNrKHNvdW5kKTtcbiAgICAgICAgc291bmQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2FucGxheXRocm91Z2gnLCBsb2FkZWQpO1xuICAgIH07XG5cbnZhciBzb3VuZCA9IG5ldyBBdWRpbyh1cmwpO1xuICAgIHNvdW5kLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXl0aHJvdWdoJywgbG9hZGVkKTtcbiAgICBzb3VuZC5sb2FkKCk7XG59O1xuXG52YXIgU3ByaXRlUGFpbnRlciA9IGZ1bmN0aW9uKGltYWdlcykge1xuICAgIHRoaXMuaW1hZ2VzID0gaW1hZ2VzO1xuICAgIHRoaXMuaW1hZ2VzSW5kZXggPSAwO1xufTtcblxudmFyIHJhZGFyR3VpZGFuY2UgPSBmdW5jdGlvbihzaG9vdGVyLCB0YXJnZXQsIHZlbG9jaXR5KSB7XG4gICAgdmFyIHJldiA9IC0xLFxuICAgICAgICBkeCA9IHNob290ZXIuY2VudGVyLnggLSB0YXJnZXQuY2VudGVyLngsXG4gICAgICAgIGR5ID0gc2hvb3Rlci5jZW50ZXIueSAtIHRhcmdldC5jZW50ZXIueSxcbiAgICAgICAgdGhldGEgPSBNYXRoLmF0YW4oZHkgLyBkeCk7XG5cbiAgICBpZiAodGFyZ2V0LmNlbnRlci54IDwgc2hvb3Rlci5jZW50ZXIueCAmJiB0YXJnZXQuY2VudGVyLnkgPiBzaG9vdGVyLmNlbnRlci55KSBcbiAgICAgICAgcmV2ID0gMTtcbiAgICBlbHNlIGlmICh0YXJnZXQuY2VudGVyLnggPCBzaG9vdGVyLmNlbnRlci54ICYmIHRhcmdldC5jZW50ZXIueSA8IFxuICAgICAgICBzaG9vdGVyLmNlbnRlci55KSByZXYgPSAxO1xuXG4gICAgdmFyIHZlbG9jaXR5X0R4ID0gcmV2ICogdmVsb2NpdHkgKiBNYXRoLmNvcyh0aGV0YSksXG4gICAgICAgIHZlbG9jaXR5X0R5ID0gcmV2ICogdmVsb2NpdHkgKiBNYXRoLnNpbih0aGV0YSk7XG5cbiAgICByZXR1cm4ge3g6IHZlbG9jaXR5X0R4LCB5OiB2ZWxvY2l0eV9EeX07XG59O1xuXG5TcHJpdGVQYWludGVyLnByb3RvdHlwZSA9IHtcbiAgICBhZHZhbmNlOiBmdW5jdGlvbihib2R5KSB7XG4gICAgICAgIGlmICh0aGlzLmltYWdlc0luZGV4ID09PSB0aGlzLmltYWdlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICB0aGlzLmltYWdlc0luZGV4ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzSW5kZXgrKztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZHJhdzogZnVuY3Rpb24oc2NyZWVuLCBib2R5KSB7XG4gICAgICAgIHZhciBzcHJpdGVJbWFnZSA9IHRoaXMuaW1hZ2VzW3RoaXMuaW1hZ2VzSW5kZXhdO1xuXG4gICAgICAgIHNjcmVlbi5kcmF3SW1hZ2Uoc3ByaXRlSW1hZ2UsIGJvZHkuY2VudGVyLnggLSBib2R5LnNpemUueCAvIDIsXG4gICAgICAgIGJvZHkuY2VudGVyLnkgLSBib2R5LnNpemUueSAvIDIsIGJvZHkuc2l6ZS54LCBib2R5LnNpemUueSk7XG4gICAgfVxufTtcblxudmFyIEV4cGxvc2lvblNwcml0ZVBhaW50ZXIgPSBmdW5jdGlvbihpbWFnZXMpIHtcbiAgICB0aGlzLmltYWdlcyA9IGltYWdlcztcbiAgICB0aGlzLmltYWdlc0luZGV4ID0gMDtcbn07XG5cbkV4cGxvc2lvblNwcml0ZVBhaW50ZXIucHJvdG90eXBlID0ge1xuICAgIGFkdmFuY2U6IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzSW5kZXggPT09IHRoaXMuaW1hZ2VzLmxlbmd0aCAtMSkge1xuICAgICAgICAgICAgLy8gdGhpcy5pbWFnZXNJbmRleCA9IDA7XG4gICAgICAgICAgICBib2R5LnJlbW92ZSA9IHRydWU7XG4gICAgICAgICAgICBib2R5LnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGJvZHkuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmltYWdlc0luZGV4Kys7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRyYXc6IGZ1bmN0aW9uKHNjcmVlbiwgYm9keSkge1xuICAgICAgICB2YXIgc3ByaXRlSW1hZ2UgPSB0aGlzLmltYWdlc1t0aGlzLmltYWdlc0luZGV4XTtcbiAgICAgICAgYm9keS5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzY3JlZW4uZHJhd0ltYWdlKHNwcml0ZUltYWdlLCBib2R5LmNlbnRlci54IC0gYm9keS5zaXplLnggLyAyLFxuICAgICAgICAgICAgYm9keS5jZW50ZXIueSAtIGJvZHkuc2l6ZS55IC8gMiwgYm9keS5zaXplLngsIGJvZHkuc2l6ZS55KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAvLyBzdGF0ZW1lbnRzIHRvIGhhbmRsZSBhbnkgZXhjZXB0aW9uc1xuICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlKTsgLy8gcGFzcyBleGNlcHRpb24gb2JqZWN0IHRvIGVycm9yIGhhbmRsZXJcbiAgICAgICAgfVxuXG4gICAgfVxufTtcblxudmFyIEN5Y2xlSW1hZ2VzID0gZnVuY3Rpb24oZnJhbWVDbnQsIFBBR0VfRkxJUF9JTlRFUlZBTCkge1xuICAgIHRoaXMuZnJhbWVDb3VudGVyID0gMDtcbiAgICB0aGlzLmZyYW1lQ250ID0gZnJhbWVDbnQ7XG4gICAgdGhpcy5sYXN0QWR2YW5jZSA9IDA7XG4gICAgdGhpcy5QQUdFX0ZMSVBfSU5URVJWQUwgPSBQQUdFX0ZMSVBfSU5URVJWQUw7XG59O1xuXG5DeWNsZUltYWdlcy5wcm90b3R5cGUgPSB7XG5cbiAgICBleGVjdXRlOiBmdW5jdGlvbihib2R5LCBnYW1lU2l6ZSwgdGltZSkge1xuICAgICAgICBpZiAodGltZSAtIHRoaXMubGFzdEFkdmFuY2UgPiB0aGlzLlBBR0VfRkxJUF9JTlRFUlZBTCkge1xuICAgICAgICAgICAgYm9keS5wYWludGVyLmFkdmFuY2UoYm9keSk7XG4gICAgICAgICAgICB0aGlzLmxhc3RBZHZhbmNlID0gdGltZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuLy8gV2Ugc3RvcmUgbGV2ZWwgZGF0YSBoZXJlIGluIGFuIG9iamVjdFxudmFyIGxldmVsRGF0YSA9IFtcbiAgICB7ICAgc3BlZWRYOiAwLjAwMjAsXG4gICAgICAgIGJlaGF2aW9yOiBzaW5lV2F2ZSxcbiAgICAgICAgaW52YWRlckltYWdlOiB7fSwgXG4gICAgICAgIHJvdzogMixcbiAgICAgICAgY29sOiA3LFxuICAgICAgICBiYWNrZ3JvdW5kSW1nOiB7fSxcbiAgICAgICAgaW52YWRlckZpcmVSYXRlOiAwLjk5NSxcbiAgICAgICAgaW52YWRlckhpdHM6IDFcbiAgICB9LFxuICAgIHsgICBzcGVlZFg6IDAuMDAyMCxcbiAgICAgICAgYmVoYXZpb3I6IGhhbGZDaXJjbGUsXG4gICAgICAgIGludmFkZXJJbWFnZToge30sIFxuICAgICAgICByb3c6IDMsXG4gICAgICAgIGNvbDogNyxcbiAgICAgICAgYmFja2dyb3VuZEltZzoge30sXG4gICAgICAgIGludmFkZXJGaXJlUmF0ZTogMC45OTUsXG4gICAgICAgIGludmFkZXJIaXRzOiAxXG4gICAgfSxcbiAgICB7ICAgc3BlZWRYOiAwLjAwMjIsXG4gICAgICAgIGJlaGF2aW9yOiByaWdodFRvTGVmdCxcbiAgICAgICAgaW52YWRlckltYWdlOiB7fSwgXG4gICAgICAgIHJvdzogNCxcbiAgICAgICAgY29sOiA3LFxuICAgICAgICBiYWNrZ3JvdW5kSW1nOiB7fSxcbiAgICAgICAgaW52YWRlckZpcmVSYXRlOiAwLjk5NCxcbiAgICAgICAgaW52YWRlckhpdHM6IDFcbiAgICB9LFxuICAgIHsgICBzcGVlZFg6IDAuMDAyMjUsXG4gICAgICAgIGJlaGF2aW9yOiBkcm9wRGlhZ25hbCxcbiAgICAgICAgaW52YWRlckltYWdlOiB7fSwgXG4gICAgICAgIHJvdzogNSxcbiAgICAgICAgY29sOiA3LFxuICAgICAgICBiYWNrZ3JvdW5kSW1nOiB7fSxcbiAgICAgICAgaW52YWRlckZpcmVSYXRlOiAwLjk5NCxcbiAgICAgICAgaW52YWRlckhpdHM6IDFcbiAgICB9LFxuXTtcblxuLy8gV2UgY3JlYXRlIGEgbmV3IGdhbWUgaGVyZVxudmFyIGdhbWUgPSBuZXcgR2FtZShcIkRlZmVuZGVyXCIsIFwic2NyZWVuXCIpO1xuXG5nYW1lLmFkZEtleUxpc3RlbmVyKHsga2V5OiAncCcsIGxpc3RlbmVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgZ2FtZS50b2dnbGVQYXVzZWQoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG5nYW1lLmFkZEtleUxpc3RlbmVyKHsga2V5OiAnc3BhY2ViYXInLCAgbGlzdGVuZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gcmVzZXQgY291bnRlciBmb3IgYnVsbGV0c1xuICAgICAgICAgICAgLy8gV2hlbiBzcGFjZWJhciBjb21lcyB1cFxuICAgICAgICAgICAgLy8ga2V5VXAoKSB1c2VzIHRoaXMgZnVuY3Rpb25cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZ2FtZS5ndW5fTG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB9LCAyMDApO1xuXG4gICAgICAgICAgICBpZiAoc2VsZi5nYW1lT3Zlcikge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnYW1lLnBhdXNlZCAmJiAhc2VsZi5nYW1lT3Zlcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0b2dnbGVQYXVzZWQ6ICcsIGdhbWUucGF1c2VkKVxuICAgICAgICAgICAgICAgIGdhbWUudG9nZ2xlUGF1c2VkKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4vLyBSZXNldCB0aGVzZSB3aGVuIHRoZSBhcnJvdyBrZXlzIGNvbWUgVVBcbmdhbWUuYWRkS2V5TGlzdGVuZXIoeyBrZXk6ICdsZWZ0IGFycm93JywgIGxpc3RlbmVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGdhbWUucGxheWVyLnN0ZXBfWCA9IDQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuZ2FtZS5hZGRLZXlMaXN0ZW5lcih7IGtleTogJ3JpZ2h0IGFycm93JywgIGxpc3RlbmVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGdhbWUucGxheWVyLnN0ZXBfWCA9IDQ7XG4gICAgICAgIH1cbiAgICB9KTtcbmdhbWUuYWRkS2V5TGlzdGVuZXIoeyBrZXk6ICd1cCBhcnJvdycsICBsaXN0ZW5lcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBnYW1lLnBsYXllci5zdGVwX1kgPSA0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbmdhbWUuYWRkS2V5TGlzdGVuZXIoeyBrZXk6ICdkb3duIGFycm93JywgIGxpc3RlbmVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGdhbWUucGxheWVyLnN0ZXBfWSA9IDQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuJCgnI3BhdXNlZFRvYXN0Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSl7XG4gICAgY29uc29sZS5sb2coJ3BhdXNlZFRvYXN0JylcbiAgICBnYW1lLnRvZ2dsZVBhdXNlZCgpO1xufSk7XG5cblxuJCgnLm5ld0dhbWVCdXR0b24nKS5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAvLyBjb25zb2xlLmxvZygnZ2FtZS5zdGFydCgpOycpO1xuICAgIC8vIEdldCB0aGUgcmVzZXQoKSB3b3JraW5nIGxhdGVyXG4gICAgLy8gZ2FtZS5yZXNldCgpO1xuICAgIC8vIGdhbWUuc3RhcnQoKTtcbiAgICAvLyB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luO1xufSk7XG5cbiQod2luZG93KS5vbignYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgIGlmICghZ2FtZS5nYW1lT3ZlciAmJiAhZ2FtZS5wYXVzZWQpIHtcbiAgICAgICAgZ2FtZS50b2dnbGVQYXVzZWQoKTtcbiAgICB9XG59KTtcblxuJCh3aW5kb3cpLm9uKCdmb2N1cycsIGZ1bmN0aW9uKCkge1xuICAgIGlmIChnYW1lLnBhdXNlZCkge1xuICAgICAgICBnYW1lLnRvZ2dsZVBhdXNlZCgpO1xuICAgIH1cbn0pO1xuICAgIFxuICAgIC8vIFF1ZXVlIEltYWdlcyBoZXJlXG5cbiAgICAvLyBMZXZlbCBCYWNrZ3JvdW5kIEltYWdlc1xuICAgIGdhbWUucXVldWVJbWFnZShcIi9pbWFnZXMvU3BhY2VfMV9zbGljZS5qcGdcIik7XG4gICAgZ2FtZS5xdWV1ZUltYWdlKFwiL2ltYWdlcy9NaWxreV9XYXkuanBnXCIpO1xuICAgIGdhbWUucXVldWVJbWFnZShcIi9pbWFnZXMvR2FsYXh5LmpwZ1wiKTtcbiAgICBnYW1lLnF1ZXVlSW1hZ2UoXCIvaW1hZ2VzL1NwYWNlXzEuanBnXCIpO1xuICAgIC8vIGdhbWUucXVldWVJbWFnZShcIi9pbWFnZXMvXCIpO1xuXG4gICAgZ2FtZS5xdWV1ZUltYWdlKFwiL2ltYWdlcy9TdGFyc2hpcHMvc3RhcnNoaXBzXzAwMDdfRXgtdmluZy5wbmdcIik7XG4gICAgZ2FtZS5xdWV1ZUltYWdlKFwiL2ltYWdlcy9taXNzbGUucG5nXCIpO1xuICAgIC8vICBRdWV1ZSBBbGllbiBzaGlwc1xuICAgIGdhbWUucXVldWVJbWFnZShcIi9pbWFnZXMvU3RhcnNoaXBzL3N0YXJzaGlwc18wMDA2X0Jvdy1maWdodGVyX1Jldi5wbmdcIik7XG4gICAgZ2FtZS5xdWV1ZUltYWdlKFwiL2ltYWdlcy9TdGFyc2hpcHMvc3RhcnNoaXBzXzAwMDRfSWNlLVNwZWVkc3Rlcl9SZXYucG5nXCIpO1xuICAgIGdhbWUucXVldWVJbWFnZShcIi9pbWFnZXMvU3RhcnNoaXBzL3N0YXJzaGlwc18wMDA1X0NlbnRlbmlhbC1IYXdrX1Jldi5wbmdcIik7XG4gICAgZ2FtZS5xdWV1ZUltYWdlKFwiL2ltYWdlcy9TdGFyc2hpcHMvc3RhcnNoaXBzXzAwMDFfU3VuLWtpbGxlcl9SZXYucG5nXCIpO1xuICAgIGdhbWUucXVldWVJbWFnZShcIi9pbWFnZXMvZW5lbXktYnVsbGV0LnBuZ1wiKTtcblxuICAgIC8vIEV4cGxvc2lvbiBJbWFnZXNcbiAgICBnYW1lLnF1ZXVlSW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzEucG5nXCIpO1xuICAgIGdhbWUucXVldWVJbWFnZShcIi9pbWFnZXMvaW1nL2V4cGxvZGVfMi5wbmdcIik7XG4gICAgZ2FtZS5xdWV1ZUltYWdlKFwiL2ltYWdlcy9pbWcvZXhwbG9kZV8zLnBuZ1wiKTtcbiAgICBnYW1lLnF1ZXVlSW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzQucG5nXCIpO1xuICAgIGdhbWUucXVldWVJbWFnZShcIi9pbWFnZXMvaW1nL2V4cGxvZGVfNS5wbmdcIik7XG4gICAgZ2FtZS5xdWV1ZUltYWdlKFwiL2ltYWdlcy9pbWcvZXhwbG9kZV82LnBuZ1wiKTtcbiAgICBnYW1lLnF1ZXVlSW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzcucG5nXCIpO1xuICAgIGdhbWUucXVldWVJbWFnZShcIi9pbWFnZXMvaW1nL2V4cGxvZGVfOC5wbmdcIik7XG4gICAgZ2FtZS5xdWV1ZUltYWdlKFwiL2ltYWdlcy9pbWcvZXhwbG9kZV85LnBuZ1wiKTtcbiAgICBnYW1lLnF1ZXVlSW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzEwLnBuZ1wiKTtcbiAgICBnYW1lLnF1ZXVlSW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzExLnBuZ1wiKTtcbiAgICBnYW1lLnF1ZXVlSW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzEyLnBuZ1wiKTtcbiAgICBnYW1lLnF1ZXVlSW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzEzLnBuZ1wiKTtcbiAgICBnYW1lLnF1ZXVlSW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzE0LnBuZ1wiKTtcbiAgICBnYW1lLnF1ZXVlSW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzE1LnBuZ1wiKTtcbiAgICBnYW1lLnF1ZXVlSW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzE2LnBuZ1wiKTtcbiAgICBcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIGxvYWRpbmdQZXJjZW50Q29tcGxldGUgPSBnYW1lLmxvYWRJbWFnZXMoKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2xvYWRpbmcgUGVyY2VudGFnZSBDb21wbGV0ZWQ6ICcsIGxvYWRpbmdQZXJjZW50Q29tcGxldGUpO1xuXG4gICAgICAgIGlmIChsb2FkaW5nUGVyY2VudENvbXBsZXRlID09PSAxMDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibG9hZGluZyAuLi4gMTAwJSBDb21wbGV0ZTogT0shISFcIik7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vIFdlIE1VU1QgTG9hZCBJbWFnZXMgaGVyZSBcbiAgICAgICAgICAgIGdhbWUuYmFja2dyb3VuZEltZyA9IGdhbWUuZ2V0SW1hZ2UoXCIvaW1hZ2VzL1NwYWNlXzFfc2xpY2UuanBnXCIpO1xuICAgICAgICAgICAgZ2FtZS5wbGF5ZXJJbWcgPSBnYW1lLmdldEltYWdlKFwiL2ltYWdlcy9TdGFyc2hpcHMvc3RhcnNoaXBzXzAwMDdfRXgtdmluZy5wbmdcIik7XG4gICAgICAgICAgICBnYW1lLm1pc3NsZUltZyA9IGdhbWUuZ2V0SW1hZ2UoXCIvaW1hZ2VzL21pc3NsZS5wbmdcIik7XG4gICAgICAgICAgICBnYW1lLmVuZW15X2J1bGxldEltZyA9IGdhbWUuZ2V0SW1hZ2UoXCIvaW1hZ2VzL2VuZW15LWJ1bGxldC5wbmdcIik7XG5cbiAgICAgICAgICAgIC8vIExvYWQgQWxpZW4gc2hpcHMgaW50byBsZXZlbCBvYmonc1xuICAgICAgICAgICAgZ2FtZS5sZXZlbERhdGFbMF0uaW52YWRlckltYWdlID0gZ2FtZS5nZXRJbWFnZShcIi9pbWFnZXMvU3RhcnNoaXBzL3N0YXJzaGlwc18wMDA2X0Jvdy1maWdodGVyX1Jldi5wbmdcIik7XG4gICAgICAgICAgICBnYW1lLmxldmVsRGF0YVsxXS5pbnZhZGVySW1hZ2UgPSBnYW1lLmdldEltYWdlKFwiL2ltYWdlcy9TdGFyc2hpcHMvc3RhcnNoaXBzXzAwMDRfSWNlLVNwZWVkc3Rlcl9SZXYucG5nXCIpO1xuICAgICAgICAgICAgZ2FtZS5sZXZlbERhdGFbMl0uaW52YWRlckltYWdlID0gZ2FtZS5nZXRJbWFnZShcIi9pbWFnZXMvU3RhcnNoaXBzL3N0YXJzaGlwc18wMDA1X0NlbnRlbmlhbC1IYXdrX1Jldi5wbmdcIik7XG4gICAgICAgICAgICBnYW1lLmxldmVsRGF0YVszXS5pbnZhZGVySW1hZ2UgPSBnYW1lLmdldEltYWdlKFwiL2ltYWdlcy9TdGFyc2hpcHMvc3RhcnNoaXBzXzAwMDFfU3VuLWtpbGxlcl9SZXYucG5nXCIpO1xuXG5cbiAgICAgICAgICAgIGdhbWUubGV2ZWxEYXRhWzBdLmJhY2tncm91bmRJbWcgPSBnYW1lLmdldEltYWdlKFwiL2ltYWdlcy9TcGFjZV8xX3NsaWNlLmpwZ1wiKTtcbiAgICAgICAgICAgIGdhbWUubGV2ZWxEYXRhWzFdLmJhY2tncm91bmRJbWcgPSBnYW1lLmdldEltYWdlKFwiL2ltYWdlcy9NaWxreV9XYXkuanBnXCIpO1xuICAgICAgICAgICAgZ2FtZS5sZXZlbERhdGFbMl0uYmFja2dyb3VuZEltZyA9IGdhbWUuZ2V0SW1hZ2UoXCIvaW1hZ2VzL0dhbGF4eS5qcGdcIik7XG4gICAgICAgICAgICBnYW1lLmxldmVsRGF0YVszXS5iYWNrZ3JvdW5kSW1nID0gZ2FtZS5nZXRJbWFnZShcIi9pbWFnZXMvU3BhY2VfMS5qcGdcIik7XG5cbiAgICAgICAgICAgIC8vTG9hZCBFeHBsb3Npb24gSW1hZ2VzXG4gICAgICAgICAgICBnYW1lLnRtcDEgPSBnYW1lLmdldEltYWdlKFwiL2ltYWdlcy9pbWcvZXhwbG9kZV8xLnBuZ1wiKTtcbiAgICAgICAgICAgIGdhbWUudG1wMiA9IGdhbWUuZ2V0SW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzIucG5nXCIpO1xuICAgICAgICAgICAgZ2FtZS50bXAzID0gZ2FtZS5nZXRJbWFnZShcIi9pbWFnZXMvaW1nL2V4cGxvZGVfMy5wbmdcIik7XG4gICAgICAgICAgICBnYW1lLnRtcDQgPSBnYW1lLmdldEltYWdlKFwiL2ltYWdlcy9pbWcvZXhwbG9kZV80LnBuZ1wiKTtcbiAgICAgICAgICAgIGdhbWUudG1wNSA9IGdhbWUuZ2V0SW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzUucG5nXCIpO1xuICAgICAgICAgICAgZ2FtZS50bXA2ID0gZ2FtZS5nZXRJbWFnZShcIi9pbWFnZXMvaW1nL2V4cGxvZGVfNi5wbmdcIik7XG4gICAgICAgICAgICBnYW1lLnRtcDcgPSBnYW1lLmdldEltYWdlKFwiL2ltYWdlcy9pbWcvZXhwbG9kZV83LnBuZ1wiKTtcbiAgICAgICAgICAgIGdhbWUudG1wOCA9IGdhbWUuZ2V0SW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzgucG5nXCIpO1xuICAgICAgICAgICAgZ2FtZS50bXA5ID0gZ2FtZS5nZXRJbWFnZShcIi9pbWFnZXMvaW1nL2V4cGxvZGVfOS5wbmdcIik7XG4gICAgICAgICAgICBnYW1lLnRtcDEwID0gZ2FtZS5nZXRJbWFnZShcIi9pbWFnZXMvaW1nL2V4cGxvZGVfMTAucG5nXCIpO1xuICAgICAgICAgICAgZ2FtZS50bXAxMSA9IGdhbWUuZ2V0SW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzExLnBuZ1wiKTtcbiAgICAgICAgICAgIGdhbWUudG1wMTIgPSBnYW1lLmdldEltYWdlKFwiL2ltYWdlcy9pbWcvZXhwbG9kZV8xMi5wbmdcIik7XG4gICAgICAgICAgICBnYW1lLnRtcDEzID0gZ2FtZS5nZXRJbWFnZShcIi9pbWFnZXMvaW1nL2V4cGxvZGVfMTMucG5nXCIpO1xuICAgICAgICAgICAgZ2FtZS50bXAxNCA9IGdhbWUuZ2V0SW1hZ2UoXCIvaW1hZ2VzL2ltZy9leHBsb2RlXzE0LnBuZ1wiKTtcbiAgICAgICAgICAgIGdhbWUudG1wMTUgPSBnYW1lLmdldEltYWdlKFwiL2ltYWdlcy9pbWcvZXhwbG9kZV8xNS5wbmdcIik7XG4gICAgICAgICAgICBnYW1lLnRtcDE2ID0gZ2FtZS5nZXRJbWFnZShcIi9pbWFnZXMvaW1nL2V4cGxvZGVfMTYucG5nXCIpO1xuXG4gICAgfSwgMTYpO1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIHZhciBsb2FkVG9hc3RUaXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9hZFRvYXN0VGl0bGVcIik7XG5cbi8vIEhpZGUgQ2FudmFzXG4kKCcjc2NyZWVuJykuaGlkZSgpO1xuXG5cbi8vIGNsaWNrIHRvIHN0YXJ0IGdhbWVcbiQoJyNsb2FkQnV0dG9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSl7XG5cbi8qIEhpZGUgSFRNTCB1c2luZyBDU1NcbiAqIENsYXNzZXMgYXJlIHVzZWQgZm9yIHNwZWVkXG4gKiB0byByZWR1Y2UgcGFnZSBmbGlja2VyIFxuICogalF1ZXJ5IGZvciBjb252ZW5pZW5jZSAqLyBcbiQoJyNwYXVzZWRUb2FzdCcpLnJlbW92ZUNsYXNzKCdoaWRlJyk7XG4kKCcjc2NvcmVUb2FzdCcpLnJlbW92ZUNsYXNzKCdoaWRlJyk7XG4kKCcjcHJvZ3Jlc3NiYXInKS5yZW1vdmVDbGFzcygnaGlkZScpO1xuJCgnI2dhbWVPdmVyVG9hc3QnKS5yZW1vdmVDbGFzcygnaGlkZScpO1xuJCgnI2hpZ2hTY29yZVRvYXN0JykucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcblxuLy8gZGV0YWNoIGJ1dCBzYXZlIEhUTUwgc25pcHBldFxuZ2FtZS5sb2FkaW5nVG9hc3QgPSAkKCcjbG9hZGluZ1RvYXN0JykuZGV0YWNoKCk7XG5nYW1lLnBhdXNlZFRvYXN0ID0gJCgnI3BhdXNlZFRvYXN0JykuZGV0YWNoKCk7XG5nYW1lLnByb2dyZXNzYmFyID0gJCgnI3Byb2dyZXNzYmFyJykuZGV0YWNoKCk7XG5nYW1lLmdhbWVPdmVyVG9hc3QgPSAkKCcjZ2FtZU92ZXJUb2FzdCcpLmRldGFjaCgpO1xuZ2FtZS5oaWdoU2NvcmVUb2FzdCA9ICQoJyNoaWdoU2NvcmVUb2FzdCcpLmRldGFjaCgpO1xuXG5cbiQoJyNzY3JlZW4nKS5zaG93KCk7XG4vLyBsb2FkVG9hc3RUaXRsZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4vLyAkKCdsb2FkVG9hc3RUaXRsZScpLmhpZGUoKVxuXG4gICAgLy8gJCgnI2xvYWRUb2FzdFRpdGxlJykuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG5cblxuICAgIGdhbWUuZXhwbG9zaW9uSW1hZ2VzLnB1c2goIGdhbWUudG1wMSwgZ2FtZS50bXAyLCBnYW1lLnRtcDMsIGdhbWUudG1wNCxcblxuICAgIGdhbWUudG1wNSwgZ2FtZS50bXA2LCBnYW1lLnRtcDcsIGdhbWUudG1wOCwgZ2FtZS50bXA5LCBnYW1lLnRtcDEwLFxuICAgIGdhbWUudG1wMTEsIGdhbWUudG1wMTIsZ2FtZS50bXAxMywgZ2FtZS50bXAxNCwgZ2FtZS50bXAxNSwgZ2FtZS50bXAxNiApO1xuICAgICAgICAgICAgXG4gICAgLy8gZ2FtZS5sb2FkTGV2ZWwoMCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIC8vIERlbGF5IGdhbWUgdG8gbWFrZSBzdXJlIGFsbCBhc3NldHMgaGF2ZSBsb2FkZWRcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIGdhbWUuc3RhcnQoKTtcbiAgICB9LCAyNTApXG59KTtcblxudmFyIGdTY29yZSA9IGdhbWUuc2NvcmU7XG5cblxuXG5cblxuXG5cblxuXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUxBO0FBQ0E7QUFPQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBM1NBO0FBQ0E7QUErU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF4REE7QUFDQTtBQTBEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTlCQTtBQUNBO0FBZ0NBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBYkE7QUFDQTtBQWdCQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFuQkE7QUFzQkE7QUFFQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQWpCQTtBQW9CQTtBQUVBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQWhCQTtBQUNBO0FBa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBbEJBO0FBQ0E7QUFvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQWxCQTtBQUNBO0FBb0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUtBO0FBS0E7QUFBQTtBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQWJBO0FBQ0E7QUFlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUVBO0FBeEJBO0FBQ0E7QUEwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQUNBO0FBV0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRkE7QUFLQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQWhCQTtBQUNBO0FBbUJBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBR0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./client/src/game.js\n");

/***/ })

/******/ });