/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./client/src/game.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./client/src/game.js":
/*!****************************!*\
  !*** ./client/src/game.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// space_defender.js\n// TODO: Break into Modules\n// TODO Fix Audio Play Error\n// See https://developers.google.com/web/updates/2017/06/play-request-was-interrupted\nconsole.warn(\"Defender Running ...\");\n\nvar Game = function Game(gameName, canvasId) {\n  var canvas = document.getElementById(canvasId);\n  console.log(\"gameName: \", gameName);\n  var width = $(window).width();\n  var height = $(window).height();\n  console.log(\"width: \", width);\n  console.log(\"height: \", height);\n  canvas.width = width;\n  canvas.height = height;\n  this.screen = canvas.getContext('2d');\n  this.gameSize = {\n    x: canvas.width,\n    y: canvas.height\n  };\n  var self = this;\n  this.keyListeners = [];\n  this.bulletCntr = 2;\n  this.score = 0;\n  this.gun_Locked = false;\n  this.gameOver = false;\n  this.paused = false;\n  this.PAUSED_TIMEOUT = 100;\n  this.HIGH_SCORES_SUFFIX = '_highScores';\n  this.invaderFireRate = 0.995;\n  this.level = 0;\n  this.fleetPatrol_X = 0;\n  this.levelData = levelData;\n  this.player = {};\n  this.playerLivesLeft = 3;\n  this.playerStatus = 'ALIVE'; // ALIVE | DEAD\n\n  this.radar = false;\n  this.imageLoadingProgressCallback = {};\n  this.images = {};\n  this.imageUrls = [];\n  this.imagesLoaded = 0;\n  this.imagesFailedToLoad = 0;\n  this.imagesIndex = 0; // Image Methods\n\n  this.getImage = getImage;\n  this.imageLoadedCallback = imageLoadedCallback;\n  this.imageLoadErrorCallback = imageLoadErrorCallback;\n  this.loadImage = loadImage;\n  this.loadImages = loadImages;\n  this.queueImage = queueImage; // Load and Call images\n\n  this.backgroundImg = {};\n  this.explosionImages = [];\n  this.togglePaused = togglePaused; // function\n\n  this.keyboarder = new Keyboarder(this); // Todo --- Put this into an obj to use as sound => url mapping\n  // Load our sounds here\n\n  loadSound(\"/sounds/rocket-ver-1.wav\", function (shootSound) {\n    self.shootSound = shootSound;\n  });\n  loadSound(\"/sounds/explosion-ver-3.wav\", function (explosionSound) {\n    self.explosionSound = explosionSound;\n  });\n  loadSound(\"/sounds/Alien_Gun-ver-1.wav\", function (alienShootSound) {\n    self.alienShootSound = alienShootSound;\n  });\n\n  self.animate = function (time) {\n    // console.log(\"delta: \", time - self.lastTime);\n    self.lastTime = time;\n\n    if (this.gameOver) {\n      // show Game Over Dialog Box Here!!\n      this.gameOver = false;\n      game.over();\n      console.log(\"***** gameOver: *****\");\n      return;\n    }\n\n    if (self.paused) {\n      setTimeout(function () {\n        requestAnimationFrame(self.animate);\n      }, this.PAUSED_TIMEOUT);\n    } else {\n      self.update(time);\n      self.draw(self.screen, self.gameSize);\n      self.drawScoreBox();\n      self.drawLivesLeftBox();\n      requestAnimationFrame(self.animate);\n    }\n  };\n\n  return this;\n}; // end of Game constructor\n\n\nGame.prototype = {\n  start: function start() {\n    var self = this;\n    this.loadLevel(this.level);\n    this.animate();\n  },\n  reset: function reset() {\n    this.bulletCntr = 2;\n    this.score = 0;\n    this.gun_Locked = false;\n    this.gameOver = false;\n    this.paused = false;\n    this.invaderFireRate = 0.995;\n    this.level = 0;\n    this.radar = false;\n    this.bulletCntr = 20;\n    this.gun_Locked = false;\n    this.gameOver = false;\n    this.paused = false;\n  },\n  update: function update(time) {\n    var bodies = this.bodies;\n\n    var tempBodies = _toConsumableArray(bodies);\n\n    var isCollidingWithSomething = function isCollidingWithSomething(b1) {\n      return tempBodies.filter(function (b2) {\n        return colliding(b1, b2);\n      }).length > 0;\n    };\n\n    var filteredBodies = tempBodies.filter(isCollidingWithSomething);\n    var invaderFilteredBodies = [];\n    var playerFilteredBodies = []; // Filter for both using 'for loop'\n    // This is much faster than the slower array filter method\n\n    for (var i = 0; i < filteredBodies.length; i++) {\n      var unknownFilteredBody = filteredBodies[i];\n\n      if (unknownFilteredBody instanceof Invader) {\n        invaderFilteredBodies.push(unknownFilteredBody);\n      }\n\n      if (unknownFilteredBody instanceof Player) {\n        playerFilteredBodies.push(unknownFilteredBody);\n      }\n    }\n\n    for (var _i = 0; _i < invaderFilteredBodies.length; _i++) {\n      if (invaderFilteredBodies[_i].name === \"invader\") {\n        this.score += 100 * (this.getLevel() + 1);\n        invaderFilteredBodies[_i].painter = new ExplosionSpritePainter(game.explosionImages, 'Invader');\n        invaderFilteredBodies[_i].name = \"explosion\";\n\n        try {\n          this.explosionSound.load();\n          this.explosionSound.play();\n        } catch (error) {\n          console.error('Error with loading & playing sound: ', error); // pass exception object to error handler\n        }\n\n        invaderFilteredBodies[_i].size.x = invaderFilteredBodies[_i].size.x * 2.5;\n        invaderFilteredBodies[_i].size.y = invaderFilteredBodies[_i].size.y * 2.5;\n      }\n    }\n\n    for (var _i2 = 0; _i2 < playerFilteredBodies.length; _i2++) {\n      if (playerFilteredBodies[_i2].name === \"player\") {\n        // If player is still alive set him to dead he just got killed LOL\n        if (this.playerStatus === 'ALIVE') {\n          this.playerStatus = 'DEAD';\n          this.playerLivesLeft--;\n        }\n\n        playerFilteredBodies[_i2].name = \"explosion\";\n        playerFilteredBodies[_i2].painter = new ExplosionSpritePainter(game.explosionImages, 'Player');\n\n        try {\n          this.explosionSound.load();\n          this.explosionSound.play();\n        } catch (error) {\n          console.error();\n          'Error with loading & playing sound: ', error; // pass exception object to error handler\n        }\n\n        var imagesSizeMultiplier = this.playerLivesLeft ? 2.5 : 6.0;\n        playerFilteredBodies[_i2].size.x = playerFilteredBodies[_i2].size.x * imagesSizeMultiplier;\n        playerFilteredBodies[_i2].size.y = playerFilteredBodies[_i2].size.y * imagesSizeMultiplier;\n      }\n    }\n\n    var notCollidingWithAnything = function notCollidingWithAnything(b1) {\n      return bodies.filter(function (b2) {\n        return colliding(b1, b2);\n      }).length === 0;\n    };\n\n    this.bodies = this.bodies.filter(notCollidingWithAnything); // Are all Invaders are destroyed \n\n    var invadersLeftAlive = this.bodies.filter(function (unknownBody) {\n      return unknownBody instanceof Invader;\n    });\n\n    if (invadersLeftAlive.length < 5 && invadersLeftAlive.length >= 3) {\n      this.invaderFireRate = 0.98; // Radar is on and stays on from here on this level\n\n      this.radar = true;\n    } else if (invadersLeftAlive.length < 3 && invadersLeftAlive.length >= 2) {\n      this.invaderFireRate = 0.96;\n    } else if (invadersLeftAlive.length < 2) {\n      this.invaderFireRate = 0.92;\n    }\n\n    var allFilteredBodies = [].concat(invaderFilteredBodies, playerFilteredBodies); // Add bodies back with explosion\n\n    if (allFilteredBodies.length > 0) {\n      for (var j = 0; j < allFilteredBodies.length; j++) {\n        this.bodies.push(allFilteredBodies[j]);\n      }\n    } // Remove all bodies that are not visible on the screen \n\n\n    this.bodies = this.bodies.filter(function (theBody) {\n      return theBody.visible;\n    });\n    this.bodies = this.bodies.filter(function (theBody) {\n      return theBody.remove === false;\n    });\n\n    if (this.playerLivesLeft < 1) {\n      //delay game over to let animation finish\n      setTimeout(function () {\n        this.gameOver = true;\n      }, 750);\n    }\n\n    if (invadersLeftAlive.length <= 0 && this.playerLivesLeft > 0) {\n      this.paused = true;\n      this.playerLivesLeft < 8 ? this.playerLivesLeft++ : this.playerLivesLeft;\n      this.incrementLevel();\n      setTimeout(function () {\n        this.game.loadLevel();\n      }, 1250);\n    } // Update Position\n\n\n    for (var idx = 0; idx < this.bodies.length; idx++) {\n      this.bodies[idx].update(time);\n    }\n  },\n  // update\n  draw: function draw(screen, gameSize) {\n    screen.clearRect(0, 0, gameSize.x, gameSize.y);\n    screen.drawImage(this.backgroundImg, 0, 0, gameSize.x, gameSize.y);\n\n    for (var i = 0; i < this.bodies.length; i++) {\n      this.bodies[i].draw(this.screen, this.bodies[i]);\n    }\n  },\n  loadLevel: function loadLevel() {\n    console.log(\" \\n *** Loading level Number \" + this.level + \" ***\");\n    var level = this.getLevel();\n    var level_data = this.levelData[level];\n    var row = level_data.row;\n    var col = level_data.col;\n    var behavior = level_data.behavior;\n    var invaderImage = level_data.invaderImage;\n    this.radar = false;\n    this.player = new Player(this, [new CycleImages(16, 32)], new SpritePainter([game.playerImg]), this.gameSize);\n    this.speedX_Val = level_data.speedX;\n    this.invaderFireRate = level_data.invaderFireRate;\n    this.backgroundImg = level_data.backgroundImg;\n    this.bodies = createInvaders(this, this.gameSize, behavior, invaderImage, row, col).concat(this.player);\n    this.paused = false;\n  },\n  getLevel: function getLevel() {\n    return this.level;\n  },\n  incrementLevel: function incrementLevel() {\n    this.level++;\n\n    if (this.level > this.levelData.length - 1) {\n      this.level = 0;\n    }\n\n    return this.level;\n  },\n  addKeyListener: function addKeyListener(keyAndListener) {\n    game.keyListeners.push(keyAndListener);\n  },\n  findKeyListener: function findKeyListener(key) {\n    var listener;\n    game.keyListeners.forEach(function (keyAndListener) {\n      var currentKey = keyAndListener.key;\n\n      if (currentKey === key) {\n        listener = keyAndListener.listener;\n      }\n    });\n    return listener;\n  },\n  keyPressed: function keyPressed(e) {\n    var listener;\n    key = undefined;\n\n    switch (e.keyCode) {\n      case 67:\n        key = 'c';\n        break;\n\n      case 80:\n        key = 'p';\n        break;\n\n      case 83:\n        key = 's';\n        break;\n    }\n\n    listener = game.findKeyListener(key);\n\n    if (listener) {\n      listener();\n    }\n  },\n  keyUp: function keyUp(e) {\n    var listener;\n    key = undefined;\n\n    switch (e.keyCode) {\n      case 32:\n        key = 'spacebar';\n        break;\n\n      case 37:\n        key = 'left arrow';\n        break;\n\n      case 39:\n        key = 'right arrow';\n        break;\n\n      case 38:\n        key = 'up arrow';\n        break;\n\n      case 40:\n        key = 'down arrow';\n        break;\n    }\n\n    listener = game.findKeyListener(key);\n\n    if (listener) {\n      listener();\n    }\n  },\n  addBody: function addBody(body) {\n    this.bodies.push(body);\n  },\n  invadersBelow: function invadersBelow(invader) {\n    return this.bodies.filter(function (b) {\n      return b instanceof Invader && b.center.y > invader.center.y && b.center.x - invader.center.x < invader.size.x;\n    }).length > 0;\n  },\n  getHighScores: function getHighScores() {\n    var key = game.gameName + game.HIGH_SCORES_SUFFIX,\n        highScoresString = localStorage[key];\n\n    if (highScoresString === undefined) {\n      localStorage[key] = JSON.stringify([]);\n    }\n\n    return JSON.parse(localStorage[key]);\n  },\n  setHighScore: function setHighScore() {\n    var key = gameName + game.HIGH_SCORES_SUFFIX,\n        highScoresString = localStorage;\n    highScores.unshift(highScore);\n    localStorage[key] = JSON.stringify(highScores);\n  },\n  clearHighScores: function clearHighScores() {\n    localStorage[game.gameName + this.HIGH_SCORES_SUFFIX] = JSON.stringify([]);\n  },\n  over: function over() {\n    var highScore = 0,\n        highScores = [{\n      score: 100\n    }, {\n      score: 75\n    }, {\n      score: 50\n    }];\n    var lastOnList = $('#highScoreList li').last().text();\n\n    if (highScores.length === 0 || game.score > highScores[0].score) {\n      // this.showHighScores();\n      game.highScoreToast.insertAfter('canvas');\n      game.highScoreToast.show();\n      $('#highScoreParagraph').html(game.score);\n    } else {\n      game.gameOverToast.insertAfter('canvas');\n      game.gameOverToast.show();\n      $('#highScoreParagraph').html(game.score);\n    }\n\n    $('#inputScore').val(game.score); // this.gameOver = true;\n    // this.lastScore = this.score;\n    // this.score = 0;\n  },\n  // High Scores ............................................................\n  showHighScores: function showHighScores() {\n    $(\"#highScoreParagraph\").show();\n    $(\"#highScoreParagraph\").text(this.score);\n    $(\"#highScoreToast\").text(this.score);\n    this.updateHighScoreList();\n  },\n  updateHighScoreList: function updateHighScoreList() {\n    var el,\n        highScores = game.getHighScores(),\n        length = highScores.length,\n        highScore,\n        listParent = highScoreList.parentNode;\n  },\n  drawScoreBox: function drawScoreBox() {\n    var text = 'SCORE: ' + this.score;\n    this.screen.fillText(text, this.gameSize.x * 0.075, this.gameSize.y * 0.050);\n    this.screen.fillStyle = 'white';\n    var fontHeight = this.gameSize.y * 0.0375;\n    this.screen.font = fontHeight + \"px Helvetica\";\n    this.screen.textAlign = 'left';\n    this.screen.textBaseline = 'top';\n  },\n  drawLivesLeftBox: function drawLivesLeftBox() {\n    var text = 'Lives: ' + this.playerLivesLeft;\n    this.screen.fillText(text, this.gameSize.x * 0.850, this.gameSize.y * 0.050);\n    this.screen.fillStyle = 'white';\n    var fontHeight = this.gameSize.y * 0.0375;\n    this.screen.font = fontHeight + \"px Helvetica\";\n    this.screen.textAlign = 'left';\n    this.screen.textBaseline = 'top';\n  }\n}; // end Game.prototype\n\nvar imageLoadedCallback = function imageLoadedCallback(e) {\n  this.imagesLoaded++;\n};\n\nvar imageLoadErrorCallback = function imageLoadErrorCallback(e) {\n  this.imagesFailedToLoad++;\n};\n\nvar loadImage = function loadImage(imageUrl) {\n  var image = new Image();\n  var self = this;\n  image.src = imageUrl;\n  image.addEventListener('load', function (e) {\n    self.imageLoadedCallback(e);\n  });\n  image.addEventListener('error', function (e) {\n    self.imageLoadErrorCallback(e);\n  });\n  this.images[imageUrl] = image;\n};\n\nvar loadImages = function loadImages() {\n  if (this.imagesIndex < this.imageUrls.length) {\n    this.loadImage(this.imageUrls[this.imagesIndex]);\n    this.imagesIndex++;\n  }\n\n  return (this.imagesLoaded + this.imagesFailedToLoad) / this.imageUrls.length * 100;\n}; // Call to add image to queue\n\n\nvar queueImage = function queueImage(imageUrl) {\n  this.imageUrls.push(imageUrl);\n};\n\nvar getImage = function getImage(imageUrl) {\n  return this.images[imageUrl];\n};\n\nvar Player = function Player(game, behavior, painter, gameSize) {\n  this.name = \"player\";\n  this.gameSize = gameSize;\n  this.behavior = behavior;\n  this.painter = painter;\n  this.game = game;\n  this.step_X = 4;\n  this.step_Y = 4;\n  this.dx = this.dy = 1.015;\n  this.animating = false;\n  this.remove = false;\n  this.visible = true;\n  this.radar = false;\n  this.size = getSpriteSize('player', this.gameSize);\n  this.center = {\n    x: gameSize.x / 2,\n    y: gameSize.y - 1.0 * this.size.y\n  };\n};\n\nPlayer.prototype = {\n  update: function update(time) {\n    //Loop through all behaviors\n    for (var i = 0; i < this.behavior.length; i++) {\n      this.behavior[i].execute(this, this.gameSize, time);\n    }\n\n    if (this.game.keyboarder.isDown(this.game.keyboarder.KEYS.LEFT)) {\n      this.step_X *= this.dx;\n      this.step_X = this.step_X > 8 ? 8 : this.step_X;\n      this.center.x = this.center.x < 0 - this.size.x / 2 ? this.game.gameSize.x : this.center.x;\n      this.center.x -= this.step_X;\n    }\n\n    if (this.game.keyboarder.isDown(this.game.keyboarder.KEYS.RIGHT)) {\n      this.step_X *= this.dx;\n      this.step_X = this.step_X > 8 ? 8 : this.step_X;\n      this.center.x = this.center.x > this.game.gameSize.x + this.size.x / 2 ? 0 : this.center.x;\n      this.center.x += this.step_X;\n    }\n\n    if (this.game.keyboarder.isDown(this.game.keyboarder.KEYS.UP)) {\n      this.step_Y *= this.dy;\n      this.step_Y = this.step_Y > 8 ? 8 : this.step_Y;\n      this.center.y = this.center.y > this.game.gameSize.y + this.size.y / 2 ? 0 : this.center.y;\n      this.center.y += this.step_Y;\n    }\n\n    if (this.game.keyboarder.isDown(this.game.keyboarder.KEYS.DOWN)) {\n      this.step_Y *= this.dy;\n      this.step_Y = this.step_Y > 8 ? 8 : this.step_Y;\n      this.center.y = this.center.y < 0 - this.size.y / 2 ? this.game.gameSize.y : this.center.y;\n      this.center.y -= this.step_Y;\n    }\n\n    if (this.game.keyboarder.isDown(this.game.keyboarder.KEYS.SPACE) && !this.game.gun_Locked) {\n      this.game.bulletCntr--;\n      this.game.gun_Locked = this.game.bulletCntr <= 0 ? true : false;\n      var missle = new Missle({\n        x: this.center.x,\n        y: this.center.y - this.size.y / 2\n      }, {\n        x: 0,\n        y: -this.gameSize.y * 0.0150\n      }, this.gameSize);\n      this.game.score -= 5;\n      this.game.addBody(missle);\n\n      try {\n        this.game.shootSound.load();\n        this.game.shootSound.play();\n      } catch (error) {\n        console.error('Error loading sound: ', error);\n      }\n    }\n  },\n  draw: function draw(screen, body) {\n    this.painter.draw(screen, body);\n  }\n};\n\nvar Invader = function Invader(game, center, behavior, painter, gameSize) {\n  this.name = \"invader\";\n  this.game = game;\n  this.gameSize = gameSize;\n  this.behavior = behavior;\n  this.painter = painter;\n  this.visible = true;\n  this.animating = false;\n  this.remove = false; // this.game.radar = false;\n\n  this.size = getSpriteSize('invader', this.gameSize);\n  this.center = center;\n  this.radians = 0.025;\n  this.totalRadians = 0;\n  this.scaleHeight = 1.5;\n  this.patrolX = 0;\n  this.speedX = gameSize.x * this.game.speedX_Val;\n};\n\nInvader.prototype = {\n  update: function update(time) {\n    var targetLocation = {};\n\n    for (var i = 0; i < this.behavior.length; i++) {\n      this.behavior[i].execute(this, this.gameSize, time);\n    }\n\n    this.visible = this.center.y > this.gameSize.y * 1.10 ? false : true;\n\n    if (Math.random() > this.game.invaderFireRate && !this.game.invadersBelow(this)) {\n      if (this.game.radar === true) {\n        targetLocation = radarGuidance(this.game.player, this, this.gameSize.y * 0.0075);\n      } else {\n        targetLocation = {\n          x: 0,\n          y: this.gameSize.y * 0.0075\n        };\n      }\n\n      var bullet = new Bullet({\n        x: this.center.x,\n        y: this.center.y + this.size.x / 2\n      }, targetLocation, this.gameSize);\n      this.game.addBody(bullet);\n\n      try {\n        this.game.alienShootSound.load();\n        this.game.alienShootSound.play();\n      } catch (error) {\n        console.error('Error adding alienShootSound: ', error);\n      }\n    }\n  },\n  draw: function draw(screen, body) {\n    this.painter.draw(screen, body);\n  }\n};\n\nvar createInvaders = function createInvaders(game, gameSize, behavior, invaderImage, row, col) {\n  this.game = game;\n  var invaders = [],\n      fleetWidth = 0,\n      size = {};\n  size = getSpriteSize('invader', gameSize);\n  fleetWidth = 2 * col * size.x;\n  this.game.fleetPatrol_X = (gameSize.x - fleetWidth) / 2; // console.log(\"this.game.fleetPatrol_X: \",this.game.fleetPatrol_X);\n\n  for (var i = 0; i < row * col; i++) {\n    var x = this.game.fleetPatrol_X + i % col * (gameSize.x * 0.075);\n    var y = gameSize.y * 0.075 + i % row * (gameSize.y * 0.075);\n    invaders.push(new Invader(game, {\n      x: x,\n      y: y\n    }, [behavior, new CycleImages(16, 32)], new SpritePainter([invaderImage]), gameSize));\n  }\n\n  return invaders;\n};\n\nvar getSpriteSize = function getSpriteSize(spriteName, gameSize) {\n  var size = {}; // not const\n  // TODO: Clean this up and figure out what kind oa screen the user has open\n  // 4:3 16:9 : 21:9 etc. and scale the images from there.\n\n  if (spriteName === 'player') {\n    if (gameSize.x > 1400) {\n      size = {\n        x: gameSize.x * 0.050,\n        y: gameSize.x * 0.0750\n      };\n    } else if (gameSize.x > 1024) {\n      size = {\n        x: gameSize.x * 0.060,\n        y: gameSize.x * 0.090\n      };\n    } else if (gameSize.x > 768) {\n      size = {\n        x: gameSize.x * 0.075,\n        y: gameSize.x * 0.1125\n      };\n    } else if (gameSize.x > 401) {\n      size = {\n        x: gameSize.x * 0.100,\n        y: gameSize.x * 0.150\n      };\n    } else {\n      size = {\n        x: 20,\n        y: 20\n      }; // x: 15, y: 15\n    }\n  } else if (spriteName === 'invader') {\n    if (gameSize.x > 1400) {\n      size = {\n        x: gameSize.x * 0.0325,\n        y: gameSize.x * 0.0325\n      };\n    } else if (gameSize.x > 1024) {\n      size = {\n        x: gameSize.x * 0.0375,\n        y: gameSize.x * 0.0375\n      };\n    } else if (gameSize.x > 768) {\n      size = {\n        x: gameSize.x * 0.0425,\n        y: gameSize.x * 0.0425\n      };\n    } else if (gameSize.x > 401) {\n      size = {\n        x: gameSize.x * 0.0525,\n        y: gameSize.x * 0.0525\n      };\n    } else {\n      size = {\n        x: 20,\n        y: 20\n      }; // x: 15, y: 15\n    }\n  } else if (spriteName === 'missle') {\n    if (gameSize.x > 1024) {\n      size = {\n        x: 15,\n        y: 25\n      };\n    } else if (gameSize.x > 768) {\n      size = {\n        x: 10,\n        y: 16\n      };\n    } else if (gameSize.x > 401) {\n      size = {\n        x: 6,\n        y: 10\n      };\n    } else {\n      size = {\n        x: 4,\n        y: 7\n      }; // x: 15, y: 15\n    }\n  } else if (spriteName === 'bullet') {\n    if (gameSize.x > 1024) {\n      size = {\n        x: 15,\n        y: 15\n      };\n    } else if (gameSize.x > 768) {\n      size = {\n        x: 12,\n        y: 12\n      };\n    } else if (gameSize.x > 401) {\n      size = {\n        x: 8,\n        y: 8\n      };\n    } else {\n      size = {\n        x: 4,\n        y: 4\n      }; // x: 15, y: 15\n    }\n  }\n\n  return size;\n}; // Movements the aliens take\n\n\nvar rightToLeft = {\n  execute: function execute(body, gameSize) {\n    if (body.patrolX < -body.game.fleetPatrol_X || body.patrolX > body.game.fleetPatrol_X) {\n      body.speedX = -body.speedX; // Drops down after every patrol\n\n      body.center.y += body.size.y * 2.5; // body.speedX += body.speedX;\n    }\n\n    body.center.x += body.speedX;\n    body.patrolX += body.speedX;\n  }\n}; // Aliens will follow a  sinewave or snake patternp  \n\nvar sineWave = {\n  execute: function execute(body, gameSize) {\n    // console.log(\"In sineWave execute's this: %j\", body)\n    if (body.patrolX < -body.game.fleetPatrol_X || body.patrolX > body.game.fleetPatrol_X) {\n      body.speedX = -body.speedX;\n      body.radians = -body.radians; // Drops down after every patrol\n\n      body.center.y += body.size.y; // body.speedX += body.speedX;\n    }\n\n    body.totalRadians += body.radians;\n    body.center.x += body.speedX;\n    body.patrolX += body.speedX;\n    body.center.y += body.scaleHeight * Math.sin(body.totalRadians);\n  }\n};\nvar halfCircle = {\n  execute: function execute(body, gameSize) {\n    if (body.patrolX < -body.game.fleetPatrol_X || body.patrolX > body.game.fleetPatrol_X) {\n      body.speedX = -body.speedX; // body.radians = -body.radians;\n      // Drops down after every patrol\n\n      body.center.y += body.size.y;\n    }\n\n    body.totalRadians += body.radians * 0.5;\n    body.center.x += body.speedX;\n    body.patrolX += body.speedX;\n    body.center.y += body.scaleHeight * Math.sin(body.totalRadians);\n  }\n};\nvar dropDiagonal = {\n  execute: function execute(body, gameSize) {\n    if (body.patrolX < -body.game.fleetPatrol_X || body.patrolX > body.game.fleetPatrol_X) {\n      body.speedX = -body.speedX; // body.radians = -body.radians;\n      // Drops down after every patrol\n\n      body.center.y += body.size.y;\n    }\n\n    body.center.x += body.speedX;\n    body.patrolX += body.speedX;\n    body.center.y += body.speedX * 0.5;\n  }\n};\n\nvar Bullet = function Bullet(center, velocity, gameSize) {\n  this.gameSize = gameSize;\n  this.center = center;\n  this.velocity = velocity;\n  this.visible = true;\n  this.remove = false;\n  this.size = getSpriteSize('bullet', gameSize);\n};\n\nBullet.prototype = {\n  update: function update() {\n    this.center.x += this.velocity.x;\n    this.center.y += this.velocity.y; // If the bullet moves off the board\n    // set to visible = false\n\n    if (this.center.y < 0 - this.gameSize.y * 0.10 || this.center.y > this.gameSize.y * 1.10 || this.center.x < 0 - this.gameSize.x * 0.10 || this.center.x > this.gameSize.x * 1.10) {\n      this.visible = false;\n    }\n  },\n  draw: function draw(screen, body) {\n    screen.drawImage(game.enemy_bulletImg, body.center.x - body.size.x / 2, body.center.y - body.size.y / 2, body.size.x, body.size.y);\n  }\n};\n\nvar Missle = function Missle(center, velocity, gameSize) {\n  this.gameSize = gameSize; // this.size = { x: 15, y: 25 };\n\n  this.size = getSpriteSize('missle', gameSize);\n  this.center = center;\n  this.velocity = velocity;\n  this.visible = true;\n  this.remove = false;\n};\n\nMissle.prototype = {\n  update: function update() {\n    this.center.x += this.velocity.x;\n    this.center.y += this.velocity.y; // If the Missle moves off the board\n    // set visible to fasle\n\n    if (this.center.y < 0 - this.gameSize.y * 0.10 || this.center.y > this.gameSize.y * 1.10 || this.center.x < 0 - this.gameSize.x * 0.10 || this.center.x > this.gameSize.x * 1.10) {\n      this.visible = false;\n    }\n  },\n  draw: function draw(screen, body) {\n    screen.drawImage(game.missleImg, body.center.x - body.size.x / 2, body.center.y - body.size.y / 2, body.size.x, body.size.y);\n  }\n};\n\nvar Keyboarder = function Keyboarder(game) {\n  var keyState = {}; // not const\n\n  window.onkeydown = function (e) {\n    keyState[e.keyCode] = true;\n    game.keyPressed(e);\n  };\n\n  window.onkeyup = function (e) {\n    keyState[e.keyCode] = false;\n    game.keyUp(e);\n  };\n\n  this.isDown = function (keyCode) {\n    return keyState[keyCode] === true;\n  };\n\n  this.KEYS = {\n    LEFT: 37,\n    RIGHT: 39,\n    UP: 40,\n    DOWN: 38,\n    SPACE: 32,\n    P: 80\n  };\n}; // Detect collisions\n\n\nvar colliding = function colliding(b1, b2) {\n  return !(b1 === b2 || b1 instanceof Player && b2 instanceof Missle || b1 instanceof Missle && b2 instanceof Player || b1 instanceof Bullet && b2 instanceof Bullet || b1 instanceof Missle && b2 instanceof Missle || b1 instanceof Invader && b2 instanceof Invader || b1 instanceof Bullet && b2 instanceof Missle || b1 instanceof Missle && b2 instanceof Bullet || b1 instanceof Invader && b2 instanceof Bullet || b1 instanceof Bullet && b2 instanceof Invader || b1.center.x + b1.size.x / 2 < b2.center.x - b2.size.x / 2 || b1.center.y + b1.size.y / 2 < b2.center.y - b2.size.y / 2 || b1.center.x - b1.size.x / 2 > b2.center.x + b2.size.x / 2 || b1.center.y - b1.size.y / 2 > b2.center.y + b2.size.y / 2);\n};\n\nvar togglePaused = function togglePaused() {\n  if (!this.paused) {\n    game.pausedToast && game.pausedToast.insertAfter('canvas');\n    game.pausedToast && game.pausedToast.show();\n  } else {\n    $('#pausedToast').detach();\n  }\n\n  this.paused = !this.paused;\n};\n\nvar loadSound = function loadSound(url, callback) {\n  var loaded = function loaded() {\n    callback(sound);\n    sound.removeEventListener('canplaythrough', loaded);\n  };\n\n  var sound = new Audio(url);\n  sound.addEventListener('canplaythrough', loaded);\n  sound.load();\n};\n\nvar SpritePainter = function SpritePainter(images) {\n  this.images = images;\n  this.imagesIndex = 0;\n};\n\nvar radarGuidance = function radarGuidance(shooter, target, velocity) {\n  var rev = -1,\n      dx = shooter.center.x - target.center.x,\n      dy = shooter.center.y - target.center.y,\n      theta = Math.atan(dy / dx);\n  if (target.center.x < shooter.center.x && target.center.y > shooter.center.y) rev = 1;else if (target.center.x < shooter.center.x && target.center.y < shooter.center.y) rev = 1;\n  var velocity_Dx = rev * velocity * Math.cos(theta),\n      velocity_Dy = rev * velocity * Math.sin(theta);\n  return {\n    x: velocity_Dx,\n    y: velocity_Dy\n  };\n};\n\nSpritePainter.prototype = {\n  advance: function advance(body) {\n    if (this.imagesIndex === this.images.length - 1) {\n      this.imagesIndex = 0;\n    } else {\n      this.imagesIndex++;\n    }\n  },\n  draw: function draw(screen, body) {\n    var spriteImage = this.images[this.imagesIndex];\n    screen.drawImage(spriteImage, body.center.x - body.size.x / 2, body.center.y - body.size.y / 2, body.size.x, body.size.y);\n  }\n};\n\nvar ExplosionSpritePainter = function ExplosionSpritePainter(images, kindOfBody) {\n  this.images = images;\n  this.imagesIndex = 0;\n  this.kindOfBody = kindOfBody ? kindOfBody : null;\n};\n\nExplosionSpritePainter.prototype = {\n  advance: function advance(body) {\n    // Last image so reset everything here\n    if (this.imagesIndex === this.images.length - 1) {\n      if (this.kindOfBody === 'Invader') {\n        body.remove = true;\n        body.visible = false;\n        body.animating = false;\n      } else if (this.kindOfBody === 'Player') {\n        body.remove = false;\n        body.visible = true;\n        body.animating = false;\n        body.name = 'player';\n        body.size.x /= game.playerLivesLeft ? 2.5 : 6.0;\n        body.size.y /= game.playerLivesLeft ? 2.5 : 6.0; // Player still alive then put them back on the canvas\n\n        if (game.playerLivesLeft > 0 && game.playerStatus === 'DEAD') {\n          body.painter = new SpritePainter([game.playerImg]);\n          game.playerStatus = 'ALIVE';\n        }\n      } else {\n        body.remove = true;\n        body.visible = false;\n        body.animating = false;\n      }\n    } else {\n      this.imagesIndex++;\n    }\n  },\n  draw: function draw(screen, body) {\n    var spriteImage = this.images[this.imagesIndex];\n    body.animating = true;\n\n    try {\n      screen.drawImage(spriteImage, body.center.x - body.size.x / 2, body.center.y - body.size.y / 2, body.size.x, body.size.y);\n    } catch (error) {\n      // statements to handle any exceptions\n      console.warn('Error writing spite to screen ', error); // pass exception object to error handler\n    }\n  }\n};\n\nvar CycleImages = function CycleImages(frameCnt, PAGE_FLIP_INTERVAL) {\n  this.frameCounter = 0;\n  this.frameCnt = frameCnt;\n  this.lastAdvance = 0;\n  this.PAGE_FLIP_INTERVAL = PAGE_FLIP_INTERVAL;\n};\n\nCycleImages.prototype = {\n  execute: function execute(body, gameSize, time) {\n    if (time - this.lastAdvance > this.PAGE_FLIP_INTERVAL) {\n      body.painter.advance(body);\n      this.lastAdvance = time;\n    }\n  }\n};\n/* We store level data here in an array of  objects\n * @speedX - speed of Invaders\n * @behavior - what pattern do the Invader take on the screen\n * @row & @col how many are on the screen \n * @backgroundImg placeholder obj for background image.\n * @invaderFireRate only small percentage is needed > 10%\n * @invaderHits number of hits to kill an Invader -- For future use.\n*/\n// TODO: Make this a DB Mongo, MySql, or Postgres call who knows???\n\nvar levelData = [{\n  speedX: 0.0020,\n  behavior: sineWave,\n  invaderImage: {},\n  row: 2,\n  col: 7,\n  backgroundImg: {},\n  invaderFireRate: 0.995,\n  invaderHits: 1\n}, {\n  speedX: 0.0020,\n  behavior: halfCircle,\n  invaderImage: {},\n  row: 3,\n  col: 7,\n  backgroundImg: {},\n  invaderFireRate: 0.995,\n  invaderHits: 1\n}, {\n  speedX: 0.0022,\n  behavior: rightToLeft,\n  invaderImage: {},\n  row: 4,\n  col: 7,\n  backgroundImg: {},\n  invaderFireRate: 0.994,\n  invaderHits: 1\n}, {\n  speedX: 0.00225,\n  behavior: dropDiagonal,\n  invaderImage: {},\n  row: 5,\n  col: 7,\n  backgroundImg: {},\n  invaderFireRate: 0.994,\n  invaderHits: 1\n}]; // We create a new game here\n\nvar game = new Game(\"Defender\", \"screen\"); // Pause the game\n\ngame.addKeyListener({\n  key: 'p',\n  listener: function listener() {\n    game.togglePaused();\n  }\n}); // Position the Player back at the start\n\ngame.addKeyListener({\n  key: 'c',\n  listener: function listener() {\n    game.player.center = {\n      x: game.gameSize.x / 2,\n      y: game.gameSize.y - 1.0 * game.player.size.y\n    };\n  }\n}); // THE Hyperspace button to to get out of a TOUGH JAM?\n// Maybe LOL!!! It is random positioning\n// Had to use \"s\" as \"h\" my preferred key and \"x\" are\n// somehow intercepted by the browser.\n\ngame.addKeyListener({\n  key: 's',\n  listener: function listener() {\n    game.player.center = {\n      x: game.gameSize.x * Math.random(),\n      y: game.gameSize.y * Math.random() - game.player.size.y\n    };\n  }\n});\ngame.addKeyListener({\n  key: 'spacebar',\n  listener: function listener() {\n    // reset counter for bullets\n    // When spacebar comes up\n    // keyUp() uses this function\n    setTimeout(function () {\n      game.gun_Locked = false;\n    }, 200);\n\n    if (self.gameOver) {\n      window.location.reload();\n    }\n\n    if (game.paused && !self.gameOver) {\n      game.togglePaused();\n    }\n  }\n}); // Reset these when the arrow keys come UP\n\ngame.addKeyListener({\n  key: 'left arrow',\n  listener: function listener() {\n    game.player.step_X = 4;\n  }\n});\ngame.addKeyListener({\n  key: 'right arrow',\n  listener: function listener() {\n    game.player.step_X = 4;\n  }\n});\ngame.addKeyListener({\n  key: 'up arrow',\n  listener: function listener() {\n    game.player.step_Y = 4;\n  }\n});\ngame.addKeyListener({\n  key: 'down arrow',\n  listener: function listener() {\n    game.player.step_Y = 4;\n  }\n});\n$('#pausedToast').on('click', function (e) {\n  game.togglePaused();\n});\n$('.newGameButton, .closeHighScoreToast').on('click', function (e) {\n  // console.log('game.start();');\n  // Get the reset() working later\n  // game.reset();\n  // game.start();\n  // window.location.reload(); // inconsistent\n  window.location.href = window.location.origin;\n});\n$('#newGameFromHighScore.newGame').on('click', function (e) {\n  window.location.href = window.location.origin;\n});\n$(window).on('blur', function () {\n  if (!game.gameOver && !game.paused) {\n    game.togglePaused();\n  }\n});\n$(window).on('focus', function () {\n  if (game.paused) {\n    game.togglePaused();\n  }\n}); // Queue Images here\n// Level Background Images\n\ngame.queueImage(\"/images/Space_1_slice.jpg\");\ngame.queueImage(\"/images/Milky_Way.jpg\");\ngame.queueImage(\"/images/Galaxy.jpg\");\ngame.queueImage(\"/images/Space_1.jpg\"); // game.queueImage(\"/images/\");\n\ngame.queueImage(\"/images/Starships/starships_0007_Ex-ving.png\");\ngame.queueImage(\"/images/missle.png\"); //  Queue Alien ships\n\ngame.queueImage(\"/images/Starships/starships_0006_Bow-fighter_Rev.png\");\ngame.queueImage(\"/images/Starships/starships_0004_Ice-Speedster_Rev.png\");\ngame.queueImage(\"/images/Starships/starships_0005_Centenial-Hawk_Rev.png\");\ngame.queueImage(\"/images/Starships/starships_0001_Sun-killer_Rev.png\");\ngame.queueImage(\"/images/enemy-bullet.png\"); // Explosion Images\n\ngame.queueImage(\"/images/img/explode_1.png\");\ngame.queueImage(\"/images/img/explode_2.png\");\ngame.queueImage(\"/images/img/explode_3.png\");\ngame.queueImage(\"/images/img/explode_4.png\");\ngame.queueImage(\"/images/img/explode_5.png\");\ngame.queueImage(\"/images/img/explode_6.png\");\ngame.queueImage(\"/images/img/explode_7.png\");\ngame.queueImage(\"/images/img/explode_8.png\");\ngame.queueImage(\"/images/img/explode_9.png\");\ngame.queueImage(\"/images/img/explode_10.png\");\ngame.queueImage(\"/images/img/explode_11.png\");\ngame.queueImage(\"/images/img/explode_12.png\");\ngame.queueImage(\"/images/img/explode_13.png\");\ngame.queueImage(\"/images/img/explode_14.png\");\ngame.queueImage(\"/images/img/explode_15.png\");\ngame.queueImage(\"/images/img/explode_16.png\"); /////////////////////////////////////////////\n\ninterval = setInterval(function () {\n  var loadingPercentComplete = game.loadImages(); // console.log('loading Percentage Completed: ', loadingPercentComplete);\n\n  if (loadingPercentComplete === 100) {\n    console.log(\"loading ... 100% Complete: OK!!!\");\n    clearInterval(interval);\n  } // We MUST Load ALL these Images here\n\n\n  game.backgroundImg = game.getImage(\"/images/Space_1_slice.jpg\");\n  game.playerImg = game.getImage(\"/images/Starships/starships_0007_Ex-ving.png\");\n  game.missleImg = game.getImage(\"/images/missle.png\");\n  game.enemy_bulletImg = game.getImage(\"/images/enemy-bullet.png\"); // Load Alien ships into level obj's\n  // TODO: Load all but first later\n\n  game.levelData[0].invaderImage = game.getImage(\"/images/Starships/starships_0006_Bow-fighter_Rev.png\");\n  game.levelData[1].invaderImage = game.getImage(\"/images/Starships/starships_0004_Ice-Speedster_Rev.png\");\n  game.levelData[2].invaderImage = game.getImage(\"/images/Starships/starships_0005_Centenial-Hawk_Rev.png\");\n  game.levelData[3].invaderImage = game.getImage(\"/images/Starships/starships_0001_Sun-killer_Rev.png\"); // TODO: Load all but first later\n\n  game.levelData[0].backgroundImg = game.getImage(\"/images/Space_1_slice.jpg\");\n  game.levelData[1].backgroundImg = game.getImage(\"/images/Milky_Way.jpg\");\n  game.levelData[2].backgroundImg = game.getImage(\"/images/Galaxy.jpg\");\n  game.levelData[3].backgroundImg = game.getImage(\"/images/Space_1.jpg\"); // Load Explosion Images\n  // These are inline/loop-unrolled for faster loading\n\n  game.tmp1 = game.getImage(\"/images/img/explode_1.png\");\n  game.tmp2 = game.getImage(\"/images/img/explode_2.png\");\n  game.tmp3 = game.getImage(\"/images/img/explode_3.png\");\n  game.tmp4 = game.getImage(\"/images/img/explode_4.png\");\n  game.tmp5 = game.getImage(\"/images/img/explode_5.png\");\n  game.tmp6 = game.getImage(\"/images/img/explode_6.png\");\n  game.tmp7 = game.getImage(\"/images/img/explode_7.png\");\n  game.tmp8 = game.getImage(\"/images/img/explode_8.png\");\n  game.tmp9 = game.getImage(\"/images/img/explode_9.png\");\n  game.tmp10 = game.getImage(\"/images/img/explode_10.png\");\n  game.tmp11 = game.getImage(\"/images/img/explode_11.png\");\n  game.tmp12 = game.getImage(\"/images/img/explode_12.png\");\n  game.tmp13 = game.getImage(\"/images/img/explode_13.png\");\n  game.tmp14 = game.getImage(\"/images/img/explode_14.png\");\n  game.tmp15 = game.getImage(\"/images/img/explode_15.png\");\n  game.tmp16 = game.getImage(\"/images/img/explode_16.png\");\n}, 16); /////////////////////////////////////////////////\n// const loadToastTitle = document.getElementById(\"loadToastTitle\");\n// Hide Canvas\n\n$('#screen').hide(); // click to start game\n\n$('#loadButton').on('click', function (e) {\n  /* Hide HTML using CSS\n   * Classes are used for speed\n   * to reduce page flicker \n   * jQuery for convenience */\n  $('#pausedToast').removeClass('hide');\n  $('#scoreToast').removeClass('hide');\n  $('#progressbar').removeClass('hide');\n  $('#gameOverToast').removeClass('hide');\n  $('#highScoreToast').removeClass('hide'); // detach and cache HTML snippet\n\n  game.loadingToast = $('#loadingToast').detach();\n  game.pausedToast = $('#pausedToast').detach();\n  game.progressbar = $('#progressbar').detach();\n  game.gameOverToast = $('#gameOverToast').detach();\n  game.highScoreToast = $('#highScoreToast').detach();\n  $('#screen').show(); // loadToastTitle.style.display = \"none\";\n  // $('loadToastTitle').hide()\n  // $('#loadToastTitle').css(\"display\", \"none\");\n\n  game.explosionImages.push(game.tmp1, game.tmp2, game.tmp3, game.tmp4, game.tmp5, game.tmp6, game.tmp7, game.tmp8, game.tmp9, game.tmp10, game.tmp11, game.tmp12, game.tmp13, game.tmp14, game.tmp15, game.tmp16); // game.loadLevel(0);\n\n  e.preventDefault(); // Delay start of game to make sure all assets have loaded\n  // TODO change to a promise/callback\n\n  setTimeout(function () {\n    game.start();\n  }, 250);\n});\nvar gScore = game.score;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./client/src/game.js\n");

/***/ })

/******/ });